From fe7c458eb4833b1de4ea817e442766ba386b9edf Mon Sep 17 00:00:00 2001
From: Tyson Gern <tgern@pivotal.io>
Date: Thu, 6 Jul 2017 10:44:44 -0600
Subject: [PATCH 1/5] Initial commit

---
 .gitignore                                         |   9 ++
 .travis.yml                                        |  92 +++++++++++
 applications/allocations-server/build.gradle       |   5 +
 .../io/pivotal/pal/tracker/allocations/App.java    |  29 ++++
 .../src/main/resources/application.properties      |   6 +
 .../tracker/allocations/AllocationsAppTest.java    |  19 +++
 .../src/test/resources/application.properties      |   6 +
 applications/backlog-server/build.gradle           |   5 +
 .../java/io/pivotal/pal/tracker/backlog/App.java   |  29 ++++
 .../src/main/resources/application.properties      |   6 +
 .../pal/tracker/backlog/BacklogAppTest.java        |  19 +++
 .../src/test/resources/application.properties      |   6 +
 applications/registration-server/build.gradle      |   7 +
 .../io/pivotal/pal/tracker/registration/App.java   |  22 +++
 .../src/main/resources/application.properties      |   6 +
 .../tracker/registration/RegistrationAppTest.java  |  22 +++
 .../src/test/resources/application.properties      |   6 +
 applications/server.gradle                         |  13 ++
 applications/timesheets-server/build.gradle        |   5 +
 .../io/pivotal/pal/tracker/timesheets/App.java     |  29 ++++
 .../src/main/resources/application.properties      |   6 +
 .../pal/tracker/timesheets/TimesheetsAppTest.java  |  19 +++
 .../src/test/resources/application.properties      |   6 +
 build.gradle                                       |  44 ++++++
 buildSrc/build.gradle                              |   7 +
 .../tracker/gradlebuild/CfMigrationPlugin.groovy   |  87 +++++++++++
 .../tracker/gradlebuild/DatabasesExtension.groovy  |   7 +
 .../gradlebuild/DependenciesGraphPlugin.groovy     |  66 ++++++++
 .../gradlebuild/LocalMigrationPlugin.groovy        |  46 ++++++
 components/accounts/build.gradle                   |   7 +
 .../pal/tracker/accounts/AccountController.java    |  39 +++++
 .../pivotal/pal/tracker/accounts/AccountInfo.java  |  88 +++++++++++
 .../tracker/accounts/RegistrationController.java   |  22 +++
 .../pal/tracker/accounts/RegistrationForm.java     |  36 +++++
 .../pal/tracker/accounts/RegistrationService.java  |  26 ++++
 .../tracker/accounts/data/AccountDataGateway.java  |  54 +++++++
 .../pal/tracker/accounts/data/AccountRecord.java   |  72 +++++++++
 .../tracker/accounts/AccountControllerTest.java    |  45 ++++++
 .../accounts/RegistrationControllerTest.java       |  31 ++++
 .../tracker/accounts/RegistrationServiceTest.java  |  32 ++++
 .../accounts/data/AccountDataGatewayTest.java      |  62 ++++++++
 components/allocations/build.gradle                |   6 +
 .../tracker/allocations/AllocationController.java  |  75 +++++++++
 .../pal/tracker/allocations/AllocationForm.java    |  89 +++++++++++
 .../pal/tracker/allocations/AllocationInfo.java    | 112 ++++++++++++++
 .../pal/tracker/allocations/ProjectClient.java     |  18 +++
 .../pal/tracker/allocations/ProjectInfo.java       |  37 +++++
 .../allocations/data/AllocationDataGateway.java    |  67 ++++++++
 .../tracker/allocations/data/AllocationFields.java |  87 +++++++++++
 .../tracker/allocations/data/AllocationRecord.java |  98 ++++++++++++
 .../allocations/AllocationControllerTest.java      |  93 +++++++++++
 .../allocations/AllocationDataGatewayTest.java     |  74 +++++++++
 .../pal/tracker/allocations/TestBuilders.java      |  51 ++++++
 components/backlog/build.gradle                    |   6 +
 .../pivotal/pal/tracker/backlog/ProjectClient.java |  18 +++
 .../pivotal/pal/tracker/backlog/ProjectInfo.java   |  37 +++++
 .../pal/tracker/backlog/StoryController.java       |  66 ++++++++
 .../io/pivotal/pal/tracker/backlog/StoryForm.java  |  66 ++++++++
 .../io/pivotal/pal/tracker/backlog/StoryInfo.java  |  89 +++++++++++
 .../pal/tracker/backlog/data/StoryDataGateway.java |  61 ++++++++
 .../pal/tracker/backlog/data/StoryFields.java      |  61 ++++++++
 .../pal/tracker/backlog/data/StoryRecord.java      |  72 +++++++++
 .../pal/tracker/backlog/StoryControllerTest.java   |  98 ++++++++++++
 .../pivotal/pal/tracker/backlog/TestBuilders.java  |  41 +++++
 .../tracker/backlog/data/StoryDataGatewayTest.java |  66 ++++++++
 components/build.gradle                            |   2 +
 components/projects/build.gradle                   |   6 +
 .../pal/tracker/projects/ProjectController.java    |  69 +++++++++
 .../pivotal/pal/tracker/projects/ProjectForm.java  |  76 +++++++++
 .../pivotal/pal/tracker/projects/ProjectInfo.java  |  99 ++++++++++++
 .../tracker/projects/data/ProjectDataGateway.java  |  69 +++++++++
 .../pal/tracker/projects/data/ProjectFields.java   |  74 +++++++++
 .../pal/tracker/projects/data/ProjectRecord.java   |  84 ++++++++++
 .../tracker/projects/ProjectControllerTest.java    |  81 ++++++++++
 .../tracker/projects/ProjectDataGatewayTest.java   |  79 ++++++++++
 .../pivotal/pal/tracker/projects/TestBuilders.java |  45 ++++++
 components/rest-support/build.gradle               |   3 +
 .../pal/tracker/restsupport/RestConfig.java        |  25 +++
 .../restsupport/SpringDefaultController.java       |  13 ++
 components/test-support/build.gradle               |   6 +
 .../tracker/testsupport/TestDataSourceFactory.java |  18 +++
 .../tracker/testsupport/TestScenarioSupport.java   |  33 ++++
 components/timesheets/build.gradle                 |   6 +
 .../pal/tracker/timesheets/ProjectClient.java      |  18 +++
 .../pal/tracker/timesheets/ProjectInfo.java        |  37 +++++
 .../tracker/timesheets/TimeEntryController.java    |  71 +++++++++
 .../pal/tracker/timesheets/TimeEntryForm.java      |  92 +++++++++++
 .../pal/tracker/timesheets/TimeEntryInfo.java      | 109 +++++++++++++
 .../timesheets/data/TimeEntryDataGateway.java      |  66 ++++++++
 .../tracker/timesheets/data/TimeEntryFields.java   |  86 +++++++++++
 .../tracker/timesheets/data/TimeEntryRecord.java   |  97 ++++++++++++
 .../pal/tracker/timesheets/TestBuilders.java       |  51 ++++++
 .../timesheets/TimeEntryControllerTest.java        |  78 ++++++++++
 .../timesheets/TimeEntryDataGatewayTest.java       |  75 +++++++++
 components/users/build.gradle                      |   5 +
 .../pivotal/pal/tracker/users/UserController.java  |  31 ++++
 .../io/pivotal/pal/tracker/users/UserInfo.java     |  49 ++++++
 .../pal/tracker/users/data/UserDataGateway.java    |  50 ++++++
 .../pivotal/pal/tracker/users/data/UserRecord.java |  39 +++++
 .../pal/tracker/users/UserControllerTest.java      |  27 ++++
 .../tracker/users/data/UserDataGatewayTest.java    |  57 +++++++
 databases/allocations-database/build.gradle        |   5 +
 .../migrations/V1__initial_schema.sql              |  11 ++
 databases/backlog-database/build.gradle            |   5 +
 .../migrations/V1__initial_schema.sql              |   9 ++
 databases/build.gradle                             |   7 +
 databases/create_databases.sql                     |  21 +++
 databases/registration-database/build.gradle       |   5 +
 .../migrations/V1__initial_schema.sql              |  34 ++++
 databases/timesheets-database/build.gradle         |   5 +
 .../migrations/V1__initial_schema.sql              |  11 ++
 gradle.properties                                  |   1 +
 gradle/wrapper/gradle-wrapper.jar                  | Bin 0 -> 54706 bytes
 gradle/wrapper/gradle-wrapper.properties           |   6 +
 gradlew                                            | 172 +++++++++++++++++++++
 gradlew.bat                                        |  84 ++++++++++
 integration-test/build.gradle                      |  10 ++
 .../java/test/pivotal/pal/tracker/FlowTest.java    | 158 +++++++++++++++++++
 .../pal/tracker/support/ApplicationServer.java     |  80 ++++++++++
 .../pivotal/pal/tracker/support/HttpClient.java    |  85 ++++++++++
 .../pivotal/pal/tracker/support/MapBuilder.java    |  26 ++++
 manifest-allocations.yml                           |  11 ++
 manifest-backlog.yml                               |  11 ++
 manifest-registration.yml                          |   9 ++
 manifest-timesheets.yml                            |  11 ++
 requests.http                                      |  49 ++++++
 rest-client.env.json                               |  14 ++
 settings.gradle                                    |  23 +++
 128 files changed, 5320 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 .travis.yml
 create mode 100644 applications/allocations-server/build.gradle
 create mode 100644 applications/allocations-server/src/main/java/io/pivotal/pal/tracker/allocations/App.java
 create mode 100644 applications/allocations-server/src/main/resources/application.properties
 create mode 100644 applications/allocations-server/src/test/java/test/pivotal/pal/tracker/allocations/AllocationsAppTest.java
 create mode 100644 applications/allocations-server/src/test/resources/application.properties
 create mode 100644 applications/backlog-server/build.gradle
 create mode 100644 applications/backlog-server/src/main/java/io/pivotal/pal/tracker/backlog/App.java
 create mode 100644 applications/backlog-server/src/main/resources/application.properties
 create mode 100644 applications/backlog-server/src/test/java/test/pivotal/pal/tracker/backlog/BacklogAppTest.java
 create mode 100644 applications/backlog-server/src/test/resources/application.properties
 create mode 100644 applications/registration-server/build.gradle
 create mode 100644 applications/registration-server/src/main/java/io/pivotal/pal/tracker/registration/App.java
 create mode 100644 applications/registration-server/src/main/resources/application.properties
 create mode 100644 applications/registration-server/src/test/java/test/pivotal/pal/tracker/registration/RegistrationAppTest.java
 create mode 100644 applications/registration-server/src/test/resources/application.properties
 create mode 100644 applications/server.gradle
 create mode 100644 applications/timesheets-server/build.gradle
 create mode 100644 applications/timesheets-server/src/main/java/io/pivotal/pal/tracker/timesheets/App.java
 create mode 100644 applications/timesheets-server/src/main/resources/application.properties
 create mode 100644 applications/timesheets-server/src/test/java/test/pivotal/pal/tracker/timesheets/TimesheetsAppTest.java
 create mode 100644 applications/timesheets-server/src/test/resources/application.properties
 create mode 100644 build.gradle
 create mode 100644 buildSrc/build.gradle
 create mode 100644 buildSrc/src/main/groovy/io/pivotal/pal/tracker/gradlebuild/CfMigrationPlugin.groovy
 create mode 100644 buildSrc/src/main/groovy/io/pivotal/pal/tracker/gradlebuild/DatabasesExtension.groovy
 create mode 100644 buildSrc/src/main/groovy/io/pivotal/pal/tracker/gradlebuild/DependenciesGraphPlugin.groovy
 create mode 100644 buildSrc/src/main/groovy/io/pivotal/pal/tracker/gradlebuild/LocalMigrationPlugin.groovy
 create mode 100644 components/accounts/build.gradle
 create mode 100644 components/accounts/src/main/java/io/pivotal/pal/tracker/accounts/AccountController.java
 create mode 100644 components/accounts/src/main/java/io/pivotal/pal/tracker/accounts/AccountInfo.java
 create mode 100644 components/accounts/src/main/java/io/pivotal/pal/tracker/accounts/RegistrationController.java
 create mode 100644 components/accounts/src/main/java/io/pivotal/pal/tracker/accounts/RegistrationForm.java
 create mode 100644 components/accounts/src/main/java/io/pivotal/pal/tracker/accounts/RegistrationService.java
 create mode 100644 components/accounts/src/main/java/io/pivotal/pal/tracker/accounts/data/AccountDataGateway.java
 create mode 100644 components/accounts/src/main/java/io/pivotal/pal/tracker/accounts/data/AccountRecord.java
 create mode 100644 components/accounts/src/test/java/test/pivotal/pal/tracker/accounts/AccountControllerTest.java
 create mode 100644 components/accounts/src/test/java/test/pivotal/pal/tracker/accounts/RegistrationControllerTest.java
 create mode 100644 components/accounts/src/test/java/test/pivotal/pal/tracker/accounts/RegistrationServiceTest.java
 create mode 100644 components/accounts/src/test/java/test/pivotal/pal/tracker/accounts/data/AccountDataGatewayTest.java
 create mode 100644 components/allocations/build.gradle
 create mode 100644 components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/AllocationController.java
 create mode 100644 components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/AllocationForm.java
 create mode 100644 components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/AllocationInfo.java
 create mode 100644 components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/ProjectClient.java
 create mode 100644 components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/ProjectInfo.java
 create mode 100644 components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/data/AllocationDataGateway.java
 create mode 100644 components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/data/AllocationFields.java
 create mode 100644 components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/data/AllocationRecord.java
 create mode 100644 components/allocations/src/test/java/test/pivotal/pal/tracker/allocations/AllocationControllerTest.java
 create mode 100644 components/allocations/src/test/java/test/pivotal/pal/tracker/allocations/AllocationDataGatewayTest.java
 create mode 100644 components/allocations/src/test/java/test/pivotal/pal/tracker/allocations/TestBuilders.java
 create mode 100644 components/backlog/build.gradle
 create mode 100644 components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/ProjectClient.java
 create mode 100644 components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/ProjectInfo.java
 create mode 100644 components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/StoryController.java
 create mode 100644 components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/StoryForm.java
 create mode 100644 components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/StoryInfo.java
 create mode 100644 components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/data/StoryDataGateway.java
 create mode 100644 components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/data/StoryFields.java
 create mode 100644 components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/data/StoryRecord.java
 create mode 100644 components/backlog/src/test/java/test/pivotal/pal/tracker/backlog/StoryControllerTest.java
 create mode 100644 components/backlog/src/test/java/test/pivotal/pal/tracker/backlog/TestBuilders.java
 create mode 100644 components/backlog/src/test/java/test/pivotal/pal/tracker/backlog/data/StoryDataGatewayTest.java
 create mode 100644 components/build.gradle
 create mode 100644 components/projects/build.gradle
 create mode 100644 components/projects/src/main/java/io/pivotal/pal/tracker/projects/ProjectController.java
 create mode 100644 components/projects/src/main/java/io/pivotal/pal/tracker/projects/ProjectForm.java
 create mode 100644 components/projects/src/main/java/io/pivotal/pal/tracker/projects/ProjectInfo.java
 create mode 100644 components/projects/src/main/java/io/pivotal/pal/tracker/projects/data/ProjectDataGateway.java
 create mode 100644 components/projects/src/main/java/io/pivotal/pal/tracker/projects/data/ProjectFields.java
 create mode 100644 components/projects/src/main/java/io/pivotal/pal/tracker/projects/data/ProjectRecord.java
 create mode 100644 components/projects/src/test/java/test/pivotal/pal/tracker/projects/ProjectControllerTest.java
 create mode 100644 components/projects/src/test/java/test/pivotal/pal/tracker/projects/ProjectDataGatewayTest.java
 create mode 100644 components/projects/src/test/java/test/pivotal/pal/tracker/projects/TestBuilders.java
 create mode 100644 components/rest-support/build.gradle
 create mode 100644 components/rest-support/src/main/java/io/pivotal/pal/tracker/restsupport/RestConfig.java
 create mode 100644 components/rest-support/src/main/java/io/pivotal/pal/tracker/restsupport/SpringDefaultController.java
 create mode 100644 components/test-support/build.gradle
 create mode 100644 components/test-support/src/main/java/io/pivotal/pal/tracker/testsupport/TestDataSourceFactory.java
 create mode 100644 components/test-support/src/main/java/io/pivotal/pal/tracker/testsupport/TestScenarioSupport.java
 create mode 100644 components/timesheets/build.gradle
 create mode 100644 components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/ProjectClient.java
 create mode 100644 components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/ProjectInfo.java
 create mode 100644 components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/TimeEntryController.java
 create mode 100644 components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/TimeEntryForm.java
 create mode 100644 components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/TimeEntryInfo.java
 create mode 100644 components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/data/TimeEntryDataGateway.java
 create mode 100644 components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/data/TimeEntryFields.java
 create mode 100644 components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/data/TimeEntryRecord.java
 create mode 100644 components/timesheets/src/test/java/test/pivotal/pal/tracker/timesheets/TestBuilders.java
 create mode 100644 components/timesheets/src/test/java/test/pivotal/pal/tracker/timesheets/TimeEntryControllerTest.java
 create mode 100644 components/timesheets/src/test/java/test/pivotal/pal/tracker/timesheets/TimeEntryDataGatewayTest.java
 create mode 100644 components/users/build.gradle
 create mode 100644 components/users/src/main/java/io/pivotal/pal/tracker/users/UserController.java
 create mode 100644 components/users/src/main/java/io/pivotal/pal/tracker/users/UserInfo.java
 create mode 100644 components/users/src/main/java/io/pivotal/pal/tracker/users/data/UserDataGateway.java
 create mode 100644 components/users/src/main/java/io/pivotal/pal/tracker/users/data/UserRecord.java
 create mode 100644 components/users/src/test/java/test/pivotal/pal/tracker/users/UserControllerTest.java
 create mode 100644 components/users/src/test/java/test/pivotal/pal/tracker/users/data/UserDataGatewayTest.java
 create mode 100644 databases/allocations-database/build.gradle
 create mode 100644 databases/allocations-database/migrations/V1__initial_schema.sql
 create mode 100644 databases/backlog-database/build.gradle
 create mode 100644 databases/backlog-database/migrations/V1__initial_schema.sql
 create mode 100644 databases/build.gradle
 create mode 100644 databases/create_databases.sql
 create mode 100644 databases/registration-database/build.gradle
 create mode 100644 databases/registration-database/migrations/V1__initial_schema.sql
 create mode 100644 databases/timesheets-database/build.gradle
 create mode 100644 databases/timesheets-database/migrations/V1__initial_schema.sql
 create mode 100644 gradle.properties
 create mode 100644 gradle/wrapper/gradle-wrapper.jar
 create mode 100644 gradle/wrapper/gradle-wrapper.properties
 create mode 100755 gradlew
 create mode 100644 gradlew.bat
 create mode 100644 integration-test/build.gradle
 create mode 100644 integration-test/src/test/java/test/pivotal/pal/tracker/FlowTest.java
 create mode 100644 integration-test/src/test/java/test/pivotal/pal/tracker/support/ApplicationServer.java
 create mode 100644 integration-test/src/test/java/test/pivotal/pal/tracker/support/HttpClient.java
 create mode 100644 integration-test/src/test/java/test/pivotal/pal/tracker/support/MapBuilder.java
 create mode 100644 manifest-allocations.yml
 create mode 100644 manifest-backlog.yml
 create mode 100644 manifest-registration.yml
 create mode 100644 manifest-timesheets.yml
 create mode 100644 requests.http
 create mode 100644 rest-client.env.json
 create mode 100644 settings.gradle

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..e1e3c15
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,9 @@
+.gradle
+build
+.idea
+*.iml
+*.ipr
+*.iws
+.DS_Store
+.env
+ci/variables.yml
diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 0000000..f7c7f26
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,92 @@
+dist: trusty
+sudo: false
+notifications:
+  email: false
+env:
+  - RELEASE_TAG="release-$TRAVIS_BUILD_NUMBER"
+stages:
+  - build and publish
+  - deploy
+  - migrate
+if: tag IS blank
+
+jobs:
+  include:
+    - stage: build and publish
+      language: java
+      jdk: oraclejdk8
+      addons:
+        mariadb: '10.2'
+      install: skip
+      before_script:
+        - mysql -uroot < databases/create_databases.sql
+        - ./gradlew testMigrate
+      script: ./gradlew clean build
+      before_deploy:
+        - git config --local user.name "Travis CI"
+        - git config --local user.email "travis@example.com"
+        - git tag -f $RELEASE_TAG
+      deploy:
+        provider: releases
+        api_key: $GITHUB_OAUTH_TOKEN
+        file:
+          - "applications/allocations-server/build/libs/allocations-server.jar"
+          - "applications/backlog-server/build/libs/backlog-server.jar"
+          - "applications/registration-server/build/libs/registration-server.jar"
+          - "applications/timesheets-server/build/libs/timesheets-server.jar"
+        skip_cleanup: true
+    - stage: deploy
+      language: java
+      script:
+        - echo "Downloading allocations server $RELEASE_TAG"
+        - wget -P applications/allocations-server/build/libs https://github.com/$GITHUB_USERNAME/pal-tracker-distributed/releases/download/$RELEASE_TAG/allocations-server.jar
+      before_deploy:
+        - cp manifest-allocations.yml manifest.yml
+        - echo "Deploying allocations server $RELEASE_TAG"
+      deploy: &cloudfoundry
+        provider: cloudfoundry
+        api: $CF_API_URL
+        username: $CF_USERNAME
+        password: $CF_PASSWORD
+        organization: $CF_ORG
+        space: review
+    - stage: deploy
+      language: bash
+      script:
+        - echo "Downloading backlog server $RELEASE_TAG"
+        - wget -P applications/backlog-server/build/libs https://github.com/$GITHUB_USERNAME/pal-tracker-distributed/releases/download/$RELEASE_TAG/backlog-server.jar
+      before_deploy:
+        - cp manifest-backlog.yml manifest.yml
+        - echo "Deploying backlog server $RELEASE_TAG"
+      deploy:
+        <<: *cloudfoundry
+    - stage: deploy
+      language: bash
+      script:
+        - echo "Downloading registration server $RELEASE_TAG"
+        - wget -P applications/registration-server/build/libs https://github.com/$GITHUB_USERNAME/pal-tracker-distributed/releases/download/$RELEASE_TAG/registration-server.jar
+      before_deploy:
+        - cp manifest-registration.yml manifest.yml
+        - echo "Deploying registration server $RELEASE_TAG"
+      deploy:
+        <<: *cloudfoundry
+    - stage: deploy
+      language: bash
+      script:
+        - echo "Downloading timesheets server $RELEASE_TAG"
+        - wget -P applications/timesheets-server/build/libs https://github.com/$GITHUB_USERNAME/pal-tracker-distributed/releases/download/$RELEASE_TAG/timesheets-server.jar
+      before_deploy:
+        - cp manifest-timesheets.yml manifest.yml
+        - echo "Deploying timesheets server $RELEASE_TAG"
+      deploy:
+        <<: *cloudfoundry
+    - stage: migrate
+      language: java
+      before_install:
+        - wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
+        - echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
+        - sudo apt-get update
+        - sudo apt-get install cf-cli
+      script:
+        - cf login -a $CF_API_URL -u $CF_USERNAME -p $CF_PASSWORD -o $CF_ORG -s review
+        - ./gradlew cfMigrate
diff --git a/applications/allocations-server/build.gradle b/applications/allocations-server/build.gradle
new file mode 100644
index 0000000..f73756a
--- /dev/null
+++ b/applications/allocations-server/build.gradle
@@ -0,0 +1,5 @@
+apply from: "$projectDir/../server.gradle"
+
+dependencies {
+    compile project(":components:allocations")
+}
diff --git a/applications/allocations-server/src/main/java/io/pivotal/pal/tracker/allocations/App.java b/applications/allocations-server/src/main/java/io/pivotal/pal/tracker/allocations/App.java
new file mode 100644
index 0000000..b034229
--- /dev/null
+++ b/applications/allocations-server/src/main/java/io/pivotal/pal/tracker/allocations/App.java
@@ -0,0 +1,29 @@
+package io.pivotal.pal.tracker.allocations;
+
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.ComponentScan;
+import org.springframework.web.client.RestOperations;
+
+import java.util.TimeZone;
+
+
+@SpringBootApplication
+@ComponentScan({"io.pivotal.pal.tracker.allocations", "io.pivotal.pal.tracker.restsupport"})
+public class App {
+
+    public static void main(String[] args) {
+        TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
+        SpringApplication.run(App.class, args);
+    }
+
+    @Bean
+    ProjectClient projectClient(
+        RestOperations restOperations,
+        @Value("${registration.server.endpoint}") String registrationEndpoint
+    ) {
+        return new ProjectClient(restOperations, registrationEndpoint);
+    }
+}
diff --git a/applications/allocations-server/src/main/resources/application.properties b/applications/allocations-server/src/main/resources/application.properties
new file mode 100644
index 0000000..57cbd07
--- /dev/null
+++ b/applications/allocations-server/src/main/resources/application.properties
@@ -0,0 +1,6 @@
+spring.application.name=allocations-server
+
+server.port=8081
+spring.datasource.username=tracker
+spring.datasource.url=jdbc:mysql://localhost:3306/tracker_allocations_dev?useSSL=false&useTimezone=true&serverTimezone=UTC&useLegacyDatetimeCode=false
+registration.server.endpoint=http://localhost:8083
diff --git a/applications/allocations-server/src/test/java/test/pivotal/pal/tracker/allocations/AllocationsAppTest.java b/applications/allocations-server/src/test/java/test/pivotal/pal/tracker/allocations/AllocationsAppTest.java
new file mode 100644
index 0000000..4577f49
--- /dev/null
+++ b/applications/allocations-server/src/test/java/test/pivotal/pal/tracker/allocations/AllocationsAppTest.java
@@ -0,0 +1,19 @@
+package test.pivotal.pal.tracker.allocations;
+
+import io.pivotal.pal.tracker.allocations.App;
+import org.junit.Test;
+import org.springframework.web.client.RestTemplate;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+public class AllocationsAppTest {
+
+    @Test
+    public void embedded() {
+        App.main(new String[]{});
+
+        String response = new RestTemplate().getForObject("http://localhost:8181/allocations?projectId=0", String.class);
+
+        assertThat(response).isEqualTo("[]");
+    }
+}
diff --git a/applications/allocations-server/src/test/resources/application.properties b/applications/allocations-server/src/test/resources/application.properties
new file mode 100644
index 0000000..9d25a30
--- /dev/null
+++ b/applications/allocations-server/src/test/resources/application.properties
@@ -0,0 +1,6 @@
+spring.application.name=allocations-server
+
+server.port=8181
+spring.datasource.username=tracker
+spring.datasource.url=jdbc:mysql://localhost:3306/tracker_allocations_test?useSSL=false&useTimezone=true&serverTimezone=UTC&useLegacyDatetimeCode=false
+registration.server.endpoint=http://localhost:8883
diff --git a/applications/backlog-server/build.gradle b/applications/backlog-server/build.gradle
new file mode 100644
index 0000000..954e9c7
--- /dev/null
+++ b/applications/backlog-server/build.gradle
@@ -0,0 +1,5 @@
+apply from: "$projectDir/../server.gradle"
+
+dependencies {
+    compile project(":components:backlog")
+}
diff --git a/applications/backlog-server/src/main/java/io/pivotal/pal/tracker/backlog/App.java b/applications/backlog-server/src/main/java/io/pivotal/pal/tracker/backlog/App.java
new file mode 100644
index 0000000..832ff65
--- /dev/null
+++ b/applications/backlog-server/src/main/java/io/pivotal/pal/tracker/backlog/App.java
@@ -0,0 +1,29 @@
+package io.pivotal.pal.tracker.backlog;
+
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.ComponentScan;
+import org.springframework.web.client.RestOperations;
+
+import java.util.TimeZone;
+
+
+@SpringBootApplication
+@ComponentScan({"io.pivotal.pal.tracker.backlog", "io.pivotal.pal.tracker.restsupport"})
+public class App {
+
+    public static void main(String[] args) {
+        TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
+        SpringApplication.run(App.class, args);
+    }
+
+    @Bean
+    ProjectClient projectClient(
+        RestOperations restOperations,
+        @Value("${registration.server.endpoint}") String registrationEndpoint
+    ) {
+        return new ProjectClient(restOperations, registrationEndpoint);
+    }
+}
diff --git a/applications/backlog-server/src/main/resources/application.properties b/applications/backlog-server/src/main/resources/application.properties
new file mode 100644
index 0000000..8ea7201
--- /dev/null
+++ b/applications/backlog-server/src/main/resources/application.properties
@@ -0,0 +1,6 @@
+spring.application.name=backlog-server
+
+server.port=8082
+spring.datasource.username=tracker
+spring.datasource.url=jdbc:mysql://localhost:3306/tracker_backlog_dev?useSSL=false&useTimezone=true&serverTimezone=UTC&useLegacyDatetimeCode=false
+registration.server.endpoint=http://localhost:8083
diff --git a/applications/backlog-server/src/test/java/test/pivotal/pal/tracker/backlog/BacklogAppTest.java b/applications/backlog-server/src/test/java/test/pivotal/pal/tracker/backlog/BacklogAppTest.java
new file mode 100644
index 0000000..dea2c61
--- /dev/null
+++ b/applications/backlog-server/src/test/java/test/pivotal/pal/tracker/backlog/BacklogAppTest.java
@@ -0,0 +1,19 @@
+package test.pivotal.pal.tracker.backlog;
+
+import io.pivotal.pal.tracker.backlog.App;
+import org.junit.Test;
+import org.springframework.web.client.RestTemplate;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+public class BacklogAppTest {
+
+    @Test
+    public void embedded() {
+        App.main(new String[]{});
+
+        String response = new RestTemplate().getForObject("http://localhost:8181/stories?projectId=0", String.class);
+
+        assertThat(response).isEqualTo("[]");
+    }
+}
diff --git a/applications/backlog-server/src/test/resources/application.properties b/applications/backlog-server/src/test/resources/application.properties
new file mode 100644
index 0000000..8b43acf
--- /dev/null
+++ b/applications/backlog-server/src/test/resources/application.properties
@@ -0,0 +1,6 @@
+spring.application.name=backlog-server
+
+server.port=8181
+spring.datasource.username=tracker
+spring.datasource.url=jdbc:mysql://localhost:3306/tracker_backlog_test?useSSL=false&useTimezone=true&serverTimezone=UTC&useLegacyDatetimeCode=false
+registration.server.endpoint=http://localhost:8883
diff --git a/applications/registration-server/build.gradle b/applications/registration-server/build.gradle
new file mode 100644
index 0000000..8b1cfbe
--- /dev/null
+++ b/applications/registration-server/build.gradle
@@ -0,0 +1,7 @@
+apply from: "$projectDir/../server.gradle"
+
+dependencies {
+    compile project(":components:accounts")
+    compile project(":components:projects")
+    compile project(":components:users")
+}
diff --git a/applications/registration-server/src/main/java/io/pivotal/pal/tracker/registration/App.java b/applications/registration-server/src/main/java/io/pivotal/pal/tracker/registration/App.java
new file mode 100644
index 0000000..c66e337
--- /dev/null
+++ b/applications/registration-server/src/main/java/io/pivotal/pal/tracker/registration/App.java
@@ -0,0 +1,22 @@
+package io.pivotal.pal.tracker.registration;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.context.annotation.ComponentScan;
+
+import java.util.TimeZone;
+
+
+@SpringBootApplication
+@ComponentScan({
+    "io.pivotal.pal.tracker.accounts",
+    "io.pivotal.pal.tracker.restsupport",
+    "io.pivotal.pal.tracker.projects",
+    "io.pivotal.pal.tracker.users"
+})
+public class App {
+    public static void main(String[] args) {
+        TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
+        SpringApplication.run(App.class, args);
+    }
+}
diff --git a/applications/registration-server/src/main/resources/application.properties b/applications/registration-server/src/main/resources/application.properties
new file mode 100644
index 0000000..ff88e76
--- /dev/null
+++ b/applications/registration-server/src/main/resources/application.properties
@@ -0,0 +1,6 @@
+spring.application.name=registration-server
+
+server.port=8083
+spring.datasource.username=tracker
+spring.datasource.url=jdbc:mysql://localhost:3306/tracker_registration_dev?useSSL=false&useTimezone=true&serverTimezone=UTC&useLegacyDatetimeCode=false
+registration.server.endpoint=http://localhost:8083
diff --git a/applications/registration-server/src/test/java/test/pivotal/pal/tracker/registration/RegistrationAppTest.java b/applications/registration-server/src/test/java/test/pivotal/pal/tracker/registration/RegistrationAppTest.java
new file mode 100644
index 0000000..8b54159
--- /dev/null
+++ b/applications/registration-server/src/test/java/test/pivotal/pal/tracker/registration/RegistrationAppTest.java
@@ -0,0 +1,22 @@
+package test.pivotal.pal.tracker.registration;
+
+import io.pivotal.pal.tracker.registration.App;
+import org.junit.Test;
+import org.springframework.web.client.RestTemplate;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+public class RegistrationAppTest {
+
+    @Test
+    public void embedded() {
+        App.main(new String[]{});
+
+        RestTemplate restTemplate = new RestTemplate();
+
+        assertThat(restTemplate.getForObject("http://localhost:8181/accounts?ownerId=0", String.class)).isEqualTo("[]");
+        assertThat(restTemplate.getForObject("http://localhost:8181/projects?accountId=0", String.class)).isEqualTo("[]");
+        assertThat(restTemplate.getForObject("http://localhost:8181/projects/0", String.class)).isEqualTo(null);
+        assertThat(restTemplate.getForObject("http://localhost:8181/users/0", String.class)).isEqualTo(null);
+    }
+}
diff --git a/applications/registration-server/src/test/resources/application.properties b/applications/registration-server/src/test/resources/application.properties
new file mode 100644
index 0000000..ff6f375
--- /dev/null
+++ b/applications/registration-server/src/test/resources/application.properties
@@ -0,0 +1,6 @@
+spring.application.name=registration-server
+
+server.port=8181
+spring.datasource.username=tracker
+spring.datasource.url=jdbc:mysql://localhost:3306/tracker_registration_test?useSSL=false&useTimezone=true&serverTimezone=UTC&useLegacyDatetimeCode=false
+registration.server.endpoint=http://localhost:8883
diff --git a/applications/server.gradle b/applications/server.gradle
new file mode 100644
index 0000000..8d81724
--- /dev/null
+++ b/applications/server.gradle
@@ -0,0 +1,13 @@
+apply plugin: "org.springframework.boot"
+
+dependencies {
+    compile project(":components:rest-support")
+
+    compile "org.springframework.boot:spring-boot-starter-web"
+
+    compile "com.zaxxer:HikariCP:2.3.7"
+    compile "mysql:mysql-connector-java:$mysqlVersion"
+    compile "ch.qos.logback:logback-classic:1.1.11"
+
+    testCompile project(":components:test-support")
+}
diff --git a/applications/timesheets-server/build.gradle b/applications/timesheets-server/build.gradle
new file mode 100644
index 0000000..0926483
--- /dev/null
+++ b/applications/timesheets-server/build.gradle
@@ -0,0 +1,5 @@
+apply from: "$projectDir/../server.gradle"
+
+dependencies {
+    compile project(":components:timesheets")
+}
diff --git a/applications/timesheets-server/src/main/java/io/pivotal/pal/tracker/timesheets/App.java b/applications/timesheets-server/src/main/java/io/pivotal/pal/tracker/timesheets/App.java
new file mode 100644
index 0000000..9df368a
--- /dev/null
+++ b/applications/timesheets-server/src/main/java/io/pivotal/pal/tracker/timesheets/App.java
@@ -0,0 +1,29 @@
+package io.pivotal.pal.tracker.timesheets;
+
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.ComponentScan;
+import org.springframework.web.client.RestOperations;
+
+import java.util.TimeZone;
+
+
+@SpringBootApplication
+@ComponentScan({"io.pivotal.pal.tracker.timesheets", "io.pivotal.pal.tracker.restsupport"})
+public class App {
+
+    public static void main(String[] args) {
+        TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
+        SpringApplication.run(App.class, args);
+    }
+
+    @Bean
+    ProjectClient projectClient(
+        RestOperations restOperations,
+        @Value("${registration.server.endpoint}") String registrationEndpoint
+    ) {
+        return new ProjectClient(restOperations, registrationEndpoint);
+    }
+}
diff --git a/applications/timesheets-server/src/main/resources/application.properties b/applications/timesheets-server/src/main/resources/application.properties
new file mode 100644
index 0000000..606bf9d
--- /dev/null
+++ b/applications/timesheets-server/src/main/resources/application.properties
@@ -0,0 +1,6 @@
+spring.application.name=timesheets-server
+
+server.port=8084
+spring.datasource.username=tracker
+spring.datasource.url=jdbc:mysql://localhost:3306/tracker_timesheets_dev?useSSL=false&useTimezone=true&serverTimezone=UTC&useLegacyDatetimeCode=false
+registration.server.endpoint=http://localhost:8083
diff --git a/applications/timesheets-server/src/test/java/test/pivotal/pal/tracker/timesheets/TimesheetsAppTest.java b/applications/timesheets-server/src/test/java/test/pivotal/pal/tracker/timesheets/TimesheetsAppTest.java
new file mode 100644
index 0000000..b6eeae9
--- /dev/null
+++ b/applications/timesheets-server/src/test/java/test/pivotal/pal/tracker/timesheets/TimesheetsAppTest.java
@@ -0,0 +1,19 @@
+package test.pivotal.pal.tracker.timesheets;
+
+import io.pivotal.pal.tracker.timesheets.App;
+import org.junit.Test;
+import org.springframework.web.client.RestTemplate;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+public class TimesheetsAppTest {
+
+    @Test
+    public void embedded() {
+        App.main(new String[]{});
+
+        String response = new RestTemplate().getForObject("http://localhost:8181/time-entries?userId=0", String.class);
+
+        assertThat(response).isEqualTo("[]");
+    }
+}
diff --git a/applications/timesheets-server/src/test/resources/application.properties b/applications/timesheets-server/src/test/resources/application.properties
new file mode 100644
index 0000000..928f52e
--- /dev/null
+++ b/applications/timesheets-server/src/test/resources/application.properties
@@ -0,0 +1,6 @@
+spring.application.name=timesheets-server
+
+server.port=8181
+spring.datasource.username=tracker
+spring.datasource.url=jdbc:mysql://localhost:3306/tracker_timesheets_test?useSSL=false&useTimezone=true&serverTimezone=UTC&useLegacyDatetimeCode=false
+registration.server.endpoint=http://localhost:8883
diff --git a/build.gradle b/build.gradle
new file mode 100644
index 0000000..3a35394
--- /dev/null
+++ b/build.gradle
@@ -0,0 +1,44 @@
+import io.pivotal.pal.tracker.gradlebuild.DependenciesGraphPlugin
+
+buildscript {
+    ext {
+        springBootVersion = "1.5.7.RELEASE"
+        springVersion = "4.3.8.RELEASE"
+        mysqlVersion = "6.0.6"
+    }
+
+    repositories {
+        mavenCentral()
+        jcenter()
+    }
+
+    dependencies {
+        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
+        classpath "mysql:mysql-connector-java:$mysqlVersion"
+    }
+}
+
+apply plugin: DependenciesGraphPlugin
+
+subprojects {
+    group "io.pivotal.pal.tracker"
+
+    apply plugin: "java"
+    defaultTasks "clean", "build"
+
+    repositories {
+        mavenCentral()
+        jcenter()
+    }
+
+    dependencies {
+        compile "com.fasterxml.jackson.core:jackson-core:2.8.4"
+        compile "com.fasterxml.jackson.core:jackson-databind:2.8.4"
+        compile "com.fasterxml.jackson.core:jackson-annotations:2.8.4"
+        compile "org.slf4j:slf4j-api:1.7.10"
+
+        testCompile "junit:junit:4.12"
+        testCompile "org.mockito:mockito-core:2.2.26"
+        testCompile "org.assertj:assertj-core:3.8.0"
+    }
+}
diff --git a/buildSrc/build.gradle b/buildSrc/build.gradle
new file mode 100644
index 0000000..5df7056
--- /dev/null
+++ b/buildSrc/build.gradle
@@ -0,0 +1,7 @@
+repositories {
+    mavenCentral()
+}
+
+dependencies {
+    compile "org.flywaydb:flyway-gradle-plugin:4.2.0"
+}
diff --git a/buildSrc/src/main/groovy/io/pivotal/pal/tracker/gradlebuild/CfMigrationPlugin.groovy b/buildSrc/src/main/groovy/io/pivotal/pal/tracker/gradlebuild/CfMigrationPlugin.groovy
new file mode 100644
index 0000000..1fda1c8
--- /dev/null
+++ b/buildSrc/src/main/groovy/io/pivotal/pal/tracker/gradlebuild/CfMigrationPlugin.groovy
@@ -0,0 +1,87 @@
+package io.pivotal.pal.tracker.gradlebuild
+
+import groovy.json.JsonSlurper
+import org.flywaydb.gradle.FlywayExtension
+import org.flywaydb.gradle.task.FlywayMigrateTask
+import org.flywaydb.gradle.task.FlywayRepairTask
+import org.gradle.api.Plugin
+import org.gradle.api.Project
+
+class CfMigrationPlugin implements Plugin<Project> {
+
+    @Override
+    void apply(Project project) {
+        Process tunnelProcess = null
+
+        project.with {
+            afterEvaluate {
+                def databases = project.extensions.findByType(DatabasesExtension)
+                def appName = databases.cfApp
+
+                task("openTunnel") {
+                    doLast {
+                        println "Opening Tunnel for $appName"
+                        Thread.start {
+                            tunnelProcess = "cf ssh -N -L 63306:${getMysqlHost(appName)}:3306 $appName".execute()
+                        }
+                        sleep 5_000L
+                    }
+                }
+
+                task("closeTunnel") {
+                    doLast {
+                        println "Closing Tunnel"
+                        tunnelProcess?.destroyForcibly()
+                    }
+                }
+
+                task("cfMigrate", type: FlywayMigrateTask, group: "Migration") {
+                    dependsOn "openTunnel"
+                    finalizedBy "closeTunnel"
+                    doFirst { extension = buildFlywayExtension(project, appName) }
+                }
+
+                task("cfRepair", type: FlywayRepairTask, group: "Migration") {
+                    dependsOn "openTunnel"
+                    finalizedBy "closeTunnel"
+                    doFirst { extension = buildFlywayExtension(project, appName) }
+                }
+            }
+        }
+    }
+
+
+    private def getMysqlHost = { cfAppName ->
+        return getMysqlCredentials(cfAppName)["hostname"]
+    }
+
+    private static def buildFlywayExtension(Project project, String cfAppName) {
+        def extension = new FlywayExtension()
+
+        getMysqlCredentials(cfAppName)?.with { credentials ->
+
+            extension.user = credentials["username"]
+            extension.password = credentials["password"]
+            extension.url = "jdbc:mysql://127.0.0.1:63306/${credentials["name"]}"
+        }
+
+        extension.locations = ["filesystem:$project.projectDir/migrations"]
+        return extension
+    }
+
+    private static def getMysqlCredentials(cfAppName) {
+        def appGuid = execute("cf app $cfAppName --guid").trim()
+        def envResponse = execute("cf curl /v2/apps/$appGuid/env")
+        def envJson = new JsonSlurper().parseText(envResponse)
+        def vcapServices = envJson["system_env_json"]?.getAt("VCAP_SERVICES")
+
+        return vcapServices?.getAt("p-mysql")?.getAt(0)?.getAt("credentials")
+    }
+
+    private static String execute(String command) {
+        def process = command.execute()
+        def output = process.text
+        process.waitFor()
+        return output
+    }
+}
diff --git a/buildSrc/src/main/groovy/io/pivotal/pal/tracker/gradlebuild/DatabasesExtension.groovy b/buildSrc/src/main/groovy/io/pivotal/pal/tracker/gradlebuild/DatabasesExtension.groovy
new file mode 100644
index 0000000..75ded03
--- /dev/null
+++ b/buildSrc/src/main/groovy/io/pivotal/pal/tracker/gradlebuild/DatabasesExtension.groovy
@@ -0,0 +1,7 @@
+package io.pivotal.pal.tracker.gradlebuild
+
+class DatabasesExtension {
+    String devDatabase
+    String testDatabase
+    String cfApp
+}
diff --git a/buildSrc/src/main/groovy/io/pivotal/pal/tracker/gradlebuild/DependenciesGraphPlugin.groovy b/buildSrc/src/main/groovy/io/pivotal/pal/tracker/gradlebuild/DependenciesGraphPlugin.groovy
new file mode 100644
index 0000000..eebd1f0
--- /dev/null
+++ b/buildSrc/src/main/groovy/io/pivotal/pal/tracker/gradlebuild/DependenciesGraphPlugin.groovy
@@ -0,0 +1,66 @@
+package io.pivotal.pal.tracker.gradlebuild
+
+import org.gradle.api.Plugin
+import org.gradle.api.Project
+import org.gradle.api.artifacts.Configuration
+import org.gradle.api.artifacts.UnknownConfigurationException
+import org.gradle.api.tasks.Delete
+import org.gradle.api.tasks.Exec
+
+class DependenciesGraphPlugin implements Plugin<Project> {
+
+    @Override
+    void apply(Project project) {
+
+        project.with {
+            task("clean", type: Delete) {
+                delete "build"
+            }
+
+            task("dependenciesGraphDot") {
+                mustRunAfter "clean"
+                group = "DependenciesGraph"
+                description = "Generate DOT file"
+
+                def graphBuildDir = "build/dependenciesGraph"
+                def dotFile = file "$graphBuildDir/graph.dot"
+
+                doLast {
+                    delete graphBuildDir
+                    mkdir graphBuildDir
+
+                    dotFile << "digraph dependencies {\n"
+
+                    subprojects.forEach { Project subProject ->
+                        if (isProjectExcluded(subProject)) {
+                            return
+                        }
+
+                        try {
+                            Configuration compileConfig = subProject.configurations["compile"]
+
+                            compileConfig
+                                .dependencies
+                                .grep { it.respondsTo("getDependencyProject") && !isProjectExcluded(it) }
+                                .forEach { dotFile << """  "$subProject.name" -> "$it.dependencyProject.name"\n""" }
+                        } catch (UnknownConfigurationException ignored) {
+                        }
+                    }
+
+                    dotFile << "}\n"
+                }
+            }
+
+            task("dependenciesGraph", dependsOn: "dependenciesGraphDot", type: Exec) {
+                workingDir "$buildDir/dependenciesGraph"
+                commandLine "dot", "-O", "-Tpng", "graph.dot"
+                group = "DependenciesGraph"
+                description = "Generate PNG file"
+            }
+        }
+    }
+
+    private static boolean isProjectExcluded(def project) {
+        return project.name.contains("support")
+    }
+}
diff --git a/buildSrc/src/main/groovy/io/pivotal/pal/tracker/gradlebuild/LocalMigrationPlugin.groovy b/buildSrc/src/main/groovy/io/pivotal/pal/tracker/gradlebuild/LocalMigrationPlugin.groovy
new file mode 100644
index 0000000..da7a43a
--- /dev/null
+++ b/buildSrc/src/main/groovy/io/pivotal/pal/tracker/gradlebuild/LocalMigrationPlugin.groovy
@@ -0,0 +1,46 @@
+package io.pivotal.pal.tracker.gradlebuild
+
+import org.flywaydb.gradle.FlywayExtension
+import org.flywaydb.gradle.task.FlywayCleanTask
+import org.flywaydb.gradle.task.FlywayMigrateTask
+import org.flywaydb.gradle.task.FlywayRepairTask
+import org.gradle.api.Plugin
+import org.gradle.api.Project
+
+class LocalMigrationPlugin implements Plugin<Project> {
+
+    @Override
+    void apply(Project project) {
+
+        project.with {
+            def databases = new DatabasesExtension()
+
+            extensions.add("flyway", new FlywayExtension())
+            extensions.add("databases", databases)
+
+            afterEvaluate {
+                addDbTask(project, "dev", databases.devDatabase)
+                addDbTask(project, "test", databases.testDatabase)
+            }
+        }
+    }
+
+    private static addDbTask(Project project, String name, String dbName) {
+        def flywayExtension = buildFlywayExtension(project, dbName)
+
+        project.task("${name}Migrate", type: FlywayMigrateTask, group: "Migration") { extension = flywayExtension }
+        project.task("${name}Clean", type: FlywayCleanTask, group: "Migration") { extension = flywayExtension }
+        project.task("${name}Repair", type: FlywayRepairTask, group: "Migration") { extension = flywayExtension }
+    }
+
+    private static FlywayExtension buildFlywayExtension(Project project, String dbName) {
+        def ext = new FlywayExtension()
+        ext.with {
+            url = "jdbc:mysql://localhost:3306/$dbName?useSSL=false&serverTimezone=UTC"
+            user = "tracker"
+            outOfOrder = false
+            locations = ["filesystem:${project.projectDir}"]
+        }
+        return ext
+    }
+}
diff --git a/components/accounts/build.gradle b/components/accounts/build.gradle
new file mode 100644
index 0000000..0eaa050
--- /dev/null
+++ b/components/accounts/build.gradle
@@ -0,0 +1,7 @@
+dependencies {
+    compile project(":components:rest-support")
+    compile project(":components:users")
+    compile "org.springframework:spring-jdbc:$springVersion"
+
+    testCompile project(":components:test-support")
+}
diff --git a/components/accounts/src/main/java/io/pivotal/pal/tracker/accounts/AccountController.java b/components/accounts/src/main/java/io/pivotal/pal/tracker/accounts/AccountController.java
new file mode 100644
index 0000000..3aa8161
--- /dev/null
+++ b/components/accounts/src/main/java/io/pivotal/pal/tracker/accounts/AccountController.java
@@ -0,0 +1,39 @@
+package io.pivotal.pal.tracker.accounts;
+
+import io.pivotal.pal.tracker.accounts.data.AccountDataGateway;
+import io.pivotal.pal.tracker.accounts.data.AccountRecord;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RequestParam;
+import org.springframework.web.bind.annotation.RestController;
+
+import java.util.List;
+
+import static io.pivotal.pal.tracker.accounts.AccountInfo.accountInfoBuilder;
+import static java.util.stream.Collectors.toList;
+
+@RestController
+public class AccountController {
+
+    private final AccountDataGateway gateway;
+
+    public AccountController(AccountDataGateway gateway) {
+        this.gateway = gateway;
+    }
+
+    @GetMapping("/accounts")
+    public List<AccountInfo> list(@RequestParam long ownerId) {
+        return gateway.findAllByOwnerId(ownerId)
+            .stream()
+            .map(this::present)
+            .collect(toList());
+    }
+
+    private AccountInfo present(AccountRecord record) {
+        return accountInfoBuilder()
+            .id(record.id)
+            .ownerId(record.ownerId)
+            .name(record.name)
+            .info("account info")
+            .build();
+    }
+}
diff --git a/components/accounts/src/main/java/io/pivotal/pal/tracker/accounts/AccountInfo.java b/components/accounts/src/main/java/io/pivotal/pal/tracker/accounts/AccountInfo.java
new file mode 100644
index 0000000..0dda9c1
--- /dev/null
+++ b/components/accounts/src/main/java/io/pivotal/pal/tracker/accounts/AccountInfo.java
@@ -0,0 +1,88 @@
+package io.pivotal.pal.tracker.accounts;
+
+public class AccountInfo {
+
+    public final long id;
+    public final long ownerId;
+    public final String name;
+    public final String info;
+
+    private AccountInfo() { // for jackson
+        this(accountInfoBuilder());
+    }
+
+    private AccountInfo(Builder builder) {
+        id = builder.id;
+        ownerId = builder.ownerId;
+        name = builder.name;
+        info = builder.info;
+    }
+
+    public static Builder accountInfoBuilder() {
+        return new Builder();
+    }
+
+    public static class Builder {
+        private long id;
+        private long ownerId;
+        private String name;
+        private String info;
+
+        public AccountInfo build() {
+            return new AccountInfo(this);
+        }
+
+        public Builder id(long id) {
+            this.id = id;
+            return this;
+        }
+
+        public Builder ownerId(long ownerId) {
+            this.ownerId = ownerId;
+            return this;
+        }
+
+        public Builder name(String name) {
+            this.name = name;
+            return this;
+        }
+
+        public Builder info(String info) {
+            this.info = info;
+            return this;
+        }
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        AccountInfo that = (AccountInfo) o;
+
+        if (id != that.id) return false;
+        if (ownerId != that.ownerId) return false;
+        if (name != null ? !name.equals(that.name) : that.name != null)
+            return false;
+        return info != null ? info.equals(that.info) : that.info == null;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = (int) (id ^ (id >>> 32));
+        result = 31 * result + (int) (ownerId ^ (ownerId >>> 32));
+        result = 31 * result + (name != null ? name.hashCode() : 0);
+        result = 31 * result + (info != null ? info.hashCode() : 0);
+        return result;
+    }
+
+    @Override
+    public String toString() {
+        return "AccountInfo{" +
+            "id=" + id +
+            ", ownerId=" + ownerId +
+            ", name='" + name + '\'' +
+            ", info='" + info + '\'' +
+            '}';
+    }
+}
diff --git a/components/accounts/src/main/java/io/pivotal/pal/tracker/accounts/RegistrationController.java b/components/accounts/src/main/java/io/pivotal/pal/tracker/accounts/RegistrationController.java
new file mode 100644
index 0000000..5234f64
--- /dev/null
+++ b/components/accounts/src/main/java/io/pivotal/pal/tracker/accounts/RegistrationController.java
@@ -0,0 +1,22 @@
+package io.pivotal.pal.tracker.accounts;
+
+import io.pivotal.pal.tracker.users.UserInfo;
+import io.pivotal.pal.tracker.users.data.UserRecord;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RestController;
+
+@RestController
+public class RegistrationController {
+    private final RegistrationService service;
+
+    public RegistrationController(RegistrationService service) {
+        this.service = service;
+    }
+
+    @PostMapping("/registration")
+    public UserInfo create(@RequestBody RegistrationForm form) {
+        UserRecord record = service.createUserWithAccount(form.name);
+        return new UserInfo(record.id, record.name, "registration info");
+    }
+}
diff --git a/components/accounts/src/main/java/io/pivotal/pal/tracker/accounts/RegistrationForm.java b/components/accounts/src/main/java/io/pivotal/pal/tracker/accounts/RegistrationForm.java
new file mode 100644
index 0000000..bc269a0
--- /dev/null
+++ b/components/accounts/src/main/java/io/pivotal/pal/tracker/accounts/RegistrationForm.java
@@ -0,0 +1,36 @@
+package io.pivotal.pal.tracker.accounts;
+
+public class RegistrationForm {
+
+    public final String name;
+
+    public RegistrationForm(String name) {
+        this.name = name;
+    }
+
+    private RegistrationForm() {
+        this(null);
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        RegistrationForm that = (RegistrationForm) o;
+
+        return name != null ? name.equals(that.name) : that.name == null;
+    }
+
+    @Override
+    public int hashCode() {
+        return name != null ? name.hashCode() : 0;
+    }
+
+    @Override
+    public String toString() {
+        return "RegistrationForm{" +
+            "name='" + name + '\'' +
+            '}';
+    }
+}
diff --git a/components/accounts/src/main/java/io/pivotal/pal/tracker/accounts/RegistrationService.java b/components/accounts/src/main/java/io/pivotal/pal/tracker/accounts/RegistrationService.java
new file mode 100644
index 0000000..87b5eb0
--- /dev/null
+++ b/components/accounts/src/main/java/io/pivotal/pal/tracker/accounts/RegistrationService.java
@@ -0,0 +1,26 @@
+package io.pivotal.pal.tracker.accounts;
+
+import io.pivotal.pal.tracker.accounts.data.AccountDataGateway;
+import io.pivotal.pal.tracker.users.data.UserDataGateway;
+import io.pivotal.pal.tracker.users.data.UserRecord;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+@Service
+public class RegistrationService {
+
+    private final UserDataGateway userDataGateway;
+    private final AccountDataGateway accountDataGateway;
+
+    public RegistrationService(UserDataGateway userDataGateway, AccountDataGateway accountDataGateway) {
+        this.userDataGateway = userDataGateway;
+        this.accountDataGateway = accountDataGateway;
+    }
+
+    @Transactional
+    public UserRecord createUserWithAccount(String name) {
+        UserRecord user = userDataGateway.create(name);
+        accountDataGateway.create(user.id, String.format("%s's account", name));
+        return user;
+    }
+}
diff --git a/components/accounts/src/main/java/io/pivotal/pal/tracker/accounts/data/AccountDataGateway.java b/components/accounts/src/main/java/io/pivotal/pal/tracker/accounts/data/AccountDataGateway.java
new file mode 100644
index 0000000..607d277
--- /dev/null
+++ b/components/accounts/src/main/java/io/pivotal/pal/tracker/accounts/data/AccountDataGateway.java
@@ -0,0 +1,54 @@
+package io.pivotal.pal.tracker.accounts.data;
+
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.core.RowMapper;
+import org.springframework.jdbc.support.GeneratedKeyHolder;
+import org.springframework.jdbc.support.KeyHolder;
+import org.springframework.stereotype.Repository;
+
+import javax.sql.DataSource;
+import java.sql.PreparedStatement;
+import java.util.List;
+
+import static io.pivotal.pal.tracker.accounts.data.AccountRecord.accountRecordBuilder;
+import static java.sql.Statement.RETURN_GENERATED_KEYS;
+
+@Repository
+public class AccountDataGateway {
+    private final JdbcTemplate jdbcTemplate;
+
+    public AccountDataGateway(DataSource dataSource) {
+        this.jdbcTemplate = new JdbcTemplate(dataSource);
+    }
+
+    public AccountRecord create(long ownerId, String name) {
+        KeyHolder keyholder = new GeneratedKeyHolder();
+
+        jdbcTemplate.update(connection -> {
+            PreparedStatement ps = connection.prepareStatement(
+                "insert into accounts (owner_id, name) values (?, ?)", RETURN_GENERATED_KEYS
+            );
+
+            ps.setLong(1, ownerId);
+            ps.setString(2, name);
+            return ps;
+        }, keyholder);
+
+        long id = keyholder.getKey().longValue();
+
+        return jdbcTemplate.queryForObject("select id, owner_id, name from accounts where id = ?", rowMapper, id);
+    }
+
+    public List<AccountRecord> findAllByOwnerId(long ownerId) {
+        return jdbcTemplate.query(
+            "select id, owner_id, name from accounts where owner_id = ? order by name desc limit 1",
+            rowMapper, ownerId
+        );
+    }
+
+    private RowMapper<AccountRecord> rowMapper = (rs, num) -> accountRecordBuilder()
+        .id(rs.getLong("id"))
+        .ownerId(rs.getLong("owner_id"))
+        .name(rs.getString("name"))
+        .build();
+}
diff --git a/components/accounts/src/main/java/io/pivotal/pal/tracker/accounts/data/AccountRecord.java b/components/accounts/src/main/java/io/pivotal/pal/tracker/accounts/data/AccountRecord.java
new file mode 100644
index 0000000..8864f4d
--- /dev/null
+++ b/components/accounts/src/main/java/io/pivotal/pal/tracker/accounts/data/AccountRecord.java
@@ -0,0 +1,72 @@
+package io.pivotal.pal.tracker.accounts.data;
+
+public class AccountRecord {
+
+    public final long id;
+    public final long ownerId;
+    public final String name;
+
+    private AccountRecord(Builder builder) {
+        this.id = builder.id;
+        this.ownerId = builder.ownerId;
+        this.name = builder.name;
+    }
+
+    public static Builder accountRecordBuilder() {
+        return new Builder();
+    }
+
+    public static class Builder {
+        private long id;
+        private long ownerId;
+        private String name;
+
+        public AccountRecord build() {
+            return new AccountRecord(this);
+        }
+
+        public Builder id(long id) {
+            this.id = id;
+            return this;
+        }
+
+        public Builder ownerId(long ownerId) {
+            this.ownerId = ownerId;
+            return this;
+        }
+
+        public Builder name(String name) {
+            this.name = name;
+            return this;
+        }
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        AccountRecord that = (AccountRecord) o;
+
+        if (id != that.id) return false;
+        if (ownerId != that.ownerId) return false;
+        return name != null ? name.equals(that.name) : that.name == null;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = (int) (id ^ (id >>> 32));
+        result = 31 * result + (int) (ownerId ^ (ownerId >>> 32));
+        result = 31 * result + (name != null ? name.hashCode() : 0);
+        return result;
+    }
+
+    @Override
+    public String toString() {
+        return "AccountRecord{" +
+            "id=" + id +
+            ", ownerId=" + ownerId +
+            ", name='" + name + '\'' +
+            '}';
+    }
+}
diff --git a/components/accounts/src/test/java/test/pivotal/pal/tracker/accounts/AccountControllerTest.java b/components/accounts/src/test/java/test/pivotal/pal/tracker/accounts/AccountControllerTest.java
new file mode 100644
index 0000000..9c4d6b0
--- /dev/null
+++ b/components/accounts/src/test/java/test/pivotal/pal/tracker/accounts/AccountControllerTest.java
@@ -0,0 +1,45 @@
+package test.pivotal.pal.tracker.accounts;
+
+import io.pivotal.pal.tracker.accounts.AccountController;
+import io.pivotal.pal.tracker.accounts.AccountInfo;
+import io.pivotal.pal.tracker.accounts.data.AccountDataGateway;
+import io.pivotal.pal.tracker.accounts.data.AccountRecord;
+import org.junit.Test;
+
+import java.util.List;
+
+import static io.pivotal.pal.tracker.accounts.AccountInfo.accountInfoBuilder;
+import static io.pivotal.pal.tracker.accounts.data.AccountRecord.accountRecordBuilder;
+import static java.util.Collections.singletonList;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.mockito.ArgumentMatchers.anyLong;
+import static org.mockito.Mockito.*;
+
+public class AccountControllerTest {
+
+    private AccountDataGateway gateway = mock(AccountDataGateway.class);
+    private AccountController controller = new AccountController(gateway);
+
+    @Test
+    public void testList() {
+        AccountRecord recordToFind = accountRecordBuilder()
+            .id(13L)
+            .ownerId(2L)
+            .name("Some Name")
+            .build();
+        doReturn(singletonList(recordToFind)).when(gateway).findAllByOwnerId(anyLong());
+
+
+        List<AccountInfo> result = controller.list(13);
+
+
+        verify(gateway).findAllByOwnerId(13L);
+        assertThat(result).containsExactly(accountInfoBuilder()
+            .id(13L)
+            .ownerId(2L)
+            .name("Some Name")
+            .info("account info")
+            .build()
+        );
+    }
+}
diff --git a/components/accounts/src/test/java/test/pivotal/pal/tracker/accounts/RegistrationControllerTest.java b/components/accounts/src/test/java/test/pivotal/pal/tracker/accounts/RegistrationControllerTest.java
new file mode 100644
index 0000000..9b0a7d3
--- /dev/null
+++ b/components/accounts/src/test/java/test/pivotal/pal/tracker/accounts/RegistrationControllerTest.java
@@ -0,0 +1,31 @@
+package test.pivotal.pal.tracker.accounts;
+
+import io.pivotal.pal.tracker.accounts.RegistrationController;
+import io.pivotal.pal.tracker.accounts.RegistrationForm;
+import io.pivotal.pal.tracker.accounts.RegistrationService;
+import io.pivotal.pal.tracker.users.UserInfo;
+import io.pivotal.pal.tracker.users.data.UserRecord;
+import org.junit.Test;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.Mockito.*;
+
+public class RegistrationControllerTest {
+
+    private RegistrationService registrationService = mock(RegistrationService.class);
+    private RegistrationController registrationController = new RegistrationController(registrationService);
+
+    @Test
+    public void create() {
+        UserRecord userRecord = new UserRecord(24L, "Billy");
+        doReturn(userRecord).when(registrationService).createUserWithAccount(any());
+
+
+        UserInfo result = registrationController.create(new RegistrationForm("Billy"));
+
+
+        verify(registrationService).createUserWithAccount("Billy");
+        assertThat(result).isEqualTo(new UserInfo(24L, "Billy", "registration info"));
+    }
+}
diff --git a/components/accounts/src/test/java/test/pivotal/pal/tracker/accounts/RegistrationServiceTest.java b/components/accounts/src/test/java/test/pivotal/pal/tracker/accounts/RegistrationServiceTest.java
new file mode 100644
index 0000000..2b66392
--- /dev/null
+++ b/components/accounts/src/test/java/test/pivotal/pal/tracker/accounts/RegistrationServiceTest.java
@@ -0,0 +1,32 @@
+package test.pivotal.pal.tracker.accounts;
+
+import io.pivotal.pal.tracker.accounts.RegistrationService;
+import io.pivotal.pal.tracker.accounts.data.AccountDataGateway;
+import io.pivotal.pal.tracker.users.data.UserDataGateway;
+import io.pivotal.pal.tracker.users.data.UserRecord;
+import org.junit.Test;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.mockito.Mockito.*;
+
+public class RegistrationServiceTest {
+    private UserDataGateway userDataGateway = mock(UserDataGateway.class);
+    private AccountDataGateway accountDataGateway = mock(AccountDataGateway.class);
+    private RegistrationService service = new RegistrationService(userDataGateway, accountDataGateway);
+
+    @Test
+    public void testCreateUserWithAccount() {
+        UserRecord createdUser = new UserRecord(22L, "Some User");
+        doReturn(createdUser).when(userDataGateway).create("Some User");
+
+
+        UserRecord result = service.createUserWithAccount("Some User");
+
+
+        verify(userDataGateway).create("Some User");
+        verify(accountDataGateway).create(22L, "Some User's account");
+
+        UserRecord expectedResult = new UserRecord(22L, "Some User");
+        assertThat(result).isEqualTo(expectedResult);
+    }
+}
diff --git a/components/accounts/src/test/java/test/pivotal/pal/tracker/accounts/data/AccountDataGatewayTest.java b/components/accounts/src/test/java/test/pivotal/pal/tracker/accounts/data/AccountDataGatewayTest.java
new file mode 100644
index 0000000..e9fce58
--- /dev/null
+++ b/components/accounts/src/test/java/test/pivotal/pal/tracker/accounts/data/AccountDataGatewayTest.java
@@ -0,0 +1,62 @@
+package test.pivotal.pal.tracker.accounts.data;
+
+import io.pivotal.pal.tracker.accounts.data.AccountDataGateway;
+import io.pivotal.pal.tracker.accounts.data.AccountRecord;
+import io.pivotal.pal.tracker.testsupport.TestScenarioSupport;
+import org.junit.Before;
+import org.junit.Test;
+import org.springframework.jdbc.core.JdbcTemplate;
+
+import java.util.List;
+import java.util.Map;
+
+import static io.pivotal.pal.tracker.accounts.data.AccountRecord.accountRecordBuilder;
+import static org.assertj.core.api.Assertions.assertThat;
+
+public class AccountDataGatewayTest {
+
+    private TestScenarioSupport testScenarioSupport = new TestScenarioSupport("tracker_registration_test");
+    private JdbcTemplate template = testScenarioSupport.template;
+    private AccountDataGateway gateway = new AccountDataGateway(testScenarioSupport.dataSource);
+
+    @Before
+    public void setup() {
+        template.execute("DELETE FROM projects;");
+        template.execute("DELETE FROM accounts;");
+        template.execute("DELETE FROM users;");
+    }
+
+    @Test
+    public void testCreate() {
+        template.execute("insert into users (id, name) values (12, 'Jack')");
+
+
+        AccountRecord created = gateway.create(12L, "anAccount");
+
+
+        assertThat(created.id).isNotNull();
+        assertThat(created.name).isEqualTo("anAccount");
+        assertThat(created.ownerId).isEqualTo(12);
+
+        Map<String, Object> persisted = template.queryForMap("SELECT * FROM accounts WHERE id = ?", created.id);
+        assertThat(persisted.get("name")).isEqualTo("anAccount");
+        assertThat(persisted.get("owner_id")).isEqualTo(12L);
+    }
+
+    @Test
+    public void testFindBy() {
+        template.execute("insert into users (id, name) values (12, 'Jack')");
+        template.execute("insert into accounts (id, owner_id, name) values (1, 12, 'anAccount')");
+
+
+        List<AccountRecord> result = gateway.findAllByOwnerId(12L);
+
+
+        assertThat(result).containsExactly(accountRecordBuilder()
+            .id(1L)
+            .ownerId(12L)
+            .name("anAccount")
+            .build()
+        );
+    }
+}
diff --git a/components/allocations/build.gradle b/components/allocations/build.gradle
new file mode 100644
index 0000000..4526bf7
--- /dev/null
+++ b/components/allocations/build.gradle
@@ -0,0 +1,6 @@
+dependencies {
+    compile project(":components:rest-support")
+    compile "org.springframework:spring-jdbc:$springVersion"
+
+    testCompile project(":components:test-support")
+}
diff --git a/components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/AllocationController.java b/components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/AllocationController.java
new file mode 100644
index 0000000..21318a5
--- /dev/null
+++ b/components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/AllocationController.java
@@ -0,0 +1,75 @@
+package io.pivotal.pal.tracker.allocations;
+
+import io.pivotal.pal.tracker.allocations.data.AllocationDataGateway;
+import io.pivotal.pal.tracker.allocations.data.AllocationFields;
+import io.pivotal.pal.tracker.allocations.data.AllocationRecord;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import java.time.LocalDate;
+import java.util.List;
+
+import static io.pivotal.pal.tracker.allocations.AllocationInfo.allocationInfoBuilder;
+import static io.pivotal.pal.tracker.allocations.data.AllocationFields.allocationFieldsBuilder;
+import static java.util.stream.Collectors.toList;
+
+@RestController
+@RequestMapping("/allocations")
+public class AllocationController {
+
+    private final AllocationDataGateway gateway;
+    private final ProjectClient client;
+
+    public AllocationController(AllocationDataGateway gateway, ProjectClient client) {
+        this.gateway = gateway;
+        this.client = client;
+    }
+
+
+    @PostMapping
+    public ResponseEntity<AllocationInfo> create(@RequestBody AllocationForm form) {
+
+        if (projectIsActive(form.projectId)) {
+            AllocationRecord record = gateway.create(formToFields(form));
+            return new ResponseEntity<>(present(record), HttpStatus.CREATED);
+        }
+
+        return new ResponseEntity<>(HttpStatus.SERVICE_UNAVAILABLE);
+    }
+
+    @GetMapping
+    public List<AllocationInfo> list(@RequestParam long projectId) {
+        return gateway.findAllByProjectId(projectId)
+            .stream()
+            .map(this::present)
+            .collect(toList());
+    }
+
+
+    private boolean projectIsActive(long projectId) {
+        ProjectInfo project = client.getProject(projectId);
+
+        return project != null && project.active;
+    }
+
+    private AllocationFields formToFields(AllocationForm form) {
+        return allocationFieldsBuilder()
+            .projectId(form.projectId)
+            .userId(form.userId)
+            .firstDay(LocalDate.parse(form.firstDay))
+            .lastDay(LocalDate.parse(form.lastDay))
+            .build();
+    }
+
+    private AllocationInfo present(AllocationRecord record) {
+        return allocationInfoBuilder()
+            .id(record.id)
+            .projectId(record.projectId)
+            .userId(record.userId)
+            .firstDay(record.firstDay.toString())
+            .lastDay(record.lastDay.toString())
+            .info("allocation info")
+            .build();
+    }
+}
diff --git a/components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/AllocationForm.java b/components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/AllocationForm.java
new file mode 100644
index 0000000..35117be
--- /dev/null
+++ b/components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/AllocationForm.java
@@ -0,0 +1,89 @@
+package io.pivotal.pal.tracker.allocations;
+
+public class AllocationForm {
+
+    public final long projectId;
+    public final long userId;
+    public final String firstDay;
+    public final String lastDay;
+
+    private AllocationForm() { // for jackson
+        this(allocationFormBuilder());
+    }
+
+    public AllocationForm(Builder builder) {
+        projectId = builder.projectId;
+        userId = builder.userId;
+        firstDay = builder.firstDay;
+        lastDay = builder.lastDay;
+    }
+
+    public static Builder allocationFormBuilder() {
+        return new Builder();
+    }
+
+
+    public static class Builder {
+        private long projectId;
+        private long userId;
+        private String firstDay;
+        private String lastDay;
+
+        public AllocationForm build() {
+            return new AllocationForm(this);
+        }
+
+        public Builder projectId(long projectId) {
+            this.projectId = projectId;
+            return this;
+        }
+
+        public Builder userId(long userId) {
+            this.userId = userId;
+            return this;
+        }
+
+        public Builder firstDay(String firstDay) {
+            this.firstDay = firstDay;
+            return this;
+        }
+
+        public Builder lastDay(String lastDay) {
+            this.lastDay = lastDay;
+            return this;
+        }
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        AllocationForm that = (AllocationForm) o;
+
+        if (projectId != that.projectId) return false;
+        if (userId != that.userId) return false;
+        if (firstDay != null ? !firstDay.equals(that.firstDay) : that.firstDay != null)
+            return false;
+        return lastDay != null ? lastDay.equals(that.lastDay) : that.lastDay == null;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = (int) (projectId ^ (projectId >>> 32));
+        result = 31 * result + (int) (userId ^ (userId >>> 32));
+        result = 31 * result + (firstDay != null ? firstDay.hashCode() : 0);
+        result = 31 * result + (lastDay != null ? lastDay.hashCode() : 0);
+        return result;
+    }
+
+    @Override
+    public String toString() {
+        return "AllocationForm{" +
+            "projectId=" + projectId +
+            ", userId=" + userId +
+            ", firstDay='" + firstDay + '\'' +
+            ", lastDay='" + lastDay + '\'' +
+            '}';
+    }
+}
diff --git a/components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/AllocationInfo.java b/components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/AllocationInfo.java
new file mode 100644
index 0000000..cdbce0b
--- /dev/null
+++ b/components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/AllocationInfo.java
@@ -0,0 +1,112 @@
+package io.pivotal.pal.tracker.allocations;
+
+public class AllocationInfo {
+
+    public final long id;
+    public final long projectId;
+    public final long userId;
+    public final String firstDay;
+    public final String lastDay;
+    public final String info;
+
+    private AllocationInfo() { // for jackson
+        this(allocationInfoBuilder());
+    }
+
+    public AllocationInfo(Builder builder) {
+        id = builder.id;
+        projectId = builder.projectId;
+        userId = builder.userId;
+        firstDay = builder.firstDay;
+        lastDay = builder.lastDay;
+        info = builder.info;
+    }
+
+    public static Builder allocationInfoBuilder() {
+        return new Builder();
+    }
+
+
+    public static class Builder {
+        private long id;
+        private long projectId;
+        private long userId;
+        private String firstDay;
+        private String lastDay;
+        private String info;
+
+        public AllocationInfo build() {
+            return new AllocationInfo(this);
+        }
+
+        public Builder id(long id) {
+            this.id = id;
+            return this;
+        }
+
+        public Builder projectId(long projectId) {
+            this.projectId = projectId;
+            return this;
+        }
+
+        public Builder userId(long userId) {
+            this.userId = userId;
+            return this;
+        }
+
+        public Builder firstDay(String firstDay) {
+            this.firstDay = firstDay;
+            return this;
+        }
+
+        public Builder lastDay(String lastDay) {
+            this.lastDay = lastDay;
+            return this;
+        }
+
+        public Builder info(String info) {
+            this.info = info;
+            return this;
+        }
+    }
+
+    @Override
+    public String toString() {
+        return "AllocationInfo{" +
+            "id=" + id +
+            ", projectId=" + projectId +
+            ", userId=" + userId +
+            ", firstDay=" + firstDay +
+            ", lastDay=" + lastDay +
+            ", info='" + info + '\'' +
+            '}';
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        AllocationInfo info1 = (AllocationInfo) o;
+
+        if (id != info1.id) return false;
+        if (projectId != info1.projectId) return false;
+        if (userId != info1.userId) return false;
+        if (firstDay != null ? !firstDay.equals(info1.firstDay) : info1.firstDay != null)
+            return false;
+        if (lastDay != null ? !lastDay.equals(info1.lastDay) : info1.lastDay != null)
+            return false;
+        return info != null ? info.equals(info1.info) : info1.info == null;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = (int) (id ^ (id >>> 32));
+        result = 31 * result + (int) (projectId ^ (projectId >>> 32));
+        result = 31 * result + (int) (userId ^ (userId >>> 32));
+        result = 31 * result + (firstDay != null ? firstDay.hashCode() : 0);
+        result = 31 * result + (lastDay != null ? lastDay.hashCode() : 0);
+        result = 31 * result + (info != null ? info.hashCode() : 0);
+        return result;
+    }
+}
diff --git a/components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/ProjectClient.java b/components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/ProjectClient.java
new file mode 100644
index 0000000..2358dab
--- /dev/null
+++ b/components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/ProjectClient.java
@@ -0,0 +1,18 @@
+package io.pivotal.pal.tracker.allocations;
+
+import org.springframework.web.client.RestOperations;
+
+public class ProjectClient {
+
+    private final RestOperations restOperations;
+    private final String registrationServerEndpoint;
+
+    public ProjectClient(RestOperations restOperations, String registrationServerEndpoint) {
+        this.restOperations= restOperations;
+        this.registrationServerEndpoint = registrationServerEndpoint;
+    }
+
+    public ProjectInfo getProject(long projectId) {
+        return restOperations.getForObject(registrationServerEndpoint + "/projects/" + projectId, ProjectInfo.class);
+    }
+}
diff --git a/components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/ProjectInfo.java b/components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/ProjectInfo.java
new file mode 100644
index 0000000..3728382
--- /dev/null
+++ b/components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/ProjectInfo.java
@@ -0,0 +1,37 @@
+package io.pivotal.pal.tracker.allocations;
+
+public class ProjectInfo {
+
+    public final boolean active;
+
+    private ProjectInfo() {
+        this(false);
+    }
+
+    public ProjectInfo(boolean active) {
+        this.active = active;
+    }
+
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        ProjectInfo that = (ProjectInfo) o;
+
+        return active == that.active;
+    }
+
+    @Override
+    public int hashCode() {
+        return (active ? 1 : 0);
+    }
+
+    @Override
+    public String toString() {
+        return "ProjectInfo{" +
+            "active=" + active +
+            '}';
+    }
+}
diff --git a/components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/data/AllocationDataGateway.java b/components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/data/AllocationDataGateway.java
new file mode 100644
index 0000000..f996307
--- /dev/null
+++ b/components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/data/AllocationDataGateway.java
@@ -0,0 +1,67 @@
+package io.pivotal.pal.tracker.allocations.data;
+
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.core.RowMapper;
+import org.springframework.jdbc.support.GeneratedKeyHolder;
+import org.springframework.jdbc.support.KeyHolder;
+import org.springframework.stereotype.Repository;
+
+import javax.sql.DataSource;
+import java.sql.Date;
+import java.sql.PreparedStatement;
+import java.util.List;
+
+import static java.sql.Statement.RETURN_GENERATED_KEYS;
+
+@Repository
+public class AllocationDataGateway {
+
+    private JdbcTemplate jdbcTemplate;
+
+    public AllocationDataGateway(DataSource dataSource) {
+        this.jdbcTemplate = new JdbcTemplate(dataSource);
+    }
+
+
+    public AllocationRecord create(AllocationFields fields) {
+        KeyHolder keyHolder = new GeneratedKeyHolder();
+
+        jdbcTemplate.update(connection -> {
+            PreparedStatement ps = connection.prepareStatement(
+                "insert into allocations (project_id, user_id, first_day, last_day) values (?, ?, ?, ?)", RETURN_GENERATED_KEYS
+            );
+
+            ps.setLong(1, fields.projectId);
+            ps.setLong(2, fields.userId);
+            ps.setDate(3, Date.valueOf(fields.firstDay));
+            ps.setDate(4, Date.valueOf(fields.lastDay));
+            return ps;
+        }, keyHolder);
+
+        return find(keyHolder.getKey().longValue());
+    }
+
+    public List<AllocationRecord> findAllByProjectId(Long projectId) {
+        return jdbcTemplate.query(
+            "select id, project_id, user_id, first_day, last_day from allocations where project_id = ? order by first_day",
+            rowMapper, projectId
+        );
+    }
+
+
+    private AllocationRecord find(long id) {
+        return jdbcTemplate.queryForObject(
+            "select id, project_id, user_id, first_day, last_day from allocations where id = ?",
+            rowMapper, id
+        );
+    }
+
+    private RowMapper<AllocationRecord> rowMapper =
+        (rs, rowNum) -> AllocationRecord.allocationRecordBuilder()
+            .id(rs.getLong("id"))
+            .projectId(rs.getLong("project_id"))
+            .userId(rs.getLong("user_id"))
+            .firstDay(rs.getDate("first_day").toLocalDate())
+            .lastDay(rs.getDate("last_day").toLocalDate())
+            .build();
+}
diff --git a/components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/data/AllocationFields.java b/components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/data/AllocationFields.java
new file mode 100644
index 0000000..61f73fb
--- /dev/null
+++ b/components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/data/AllocationFields.java
@@ -0,0 +1,87 @@
+package io.pivotal.pal.tracker.allocations.data;
+
+import java.time.LocalDate;
+
+public class AllocationFields {
+
+    public final long projectId;
+    public final long userId;
+    public final LocalDate firstDay;
+    public final LocalDate lastDay;
+
+    public AllocationFields(Builder builder) {
+        projectId = builder.projectId;
+        userId = builder.userId;
+        firstDay = builder.firstDay;
+        lastDay = builder.lastDay;
+    }
+
+    public static Builder allocationFieldsBuilder() {
+        return new Builder();
+    }
+
+    public static class Builder {
+        private long projectId;
+        private long userId;
+        private LocalDate firstDay;
+        private LocalDate lastDay;
+
+        public AllocationFields build() {
+            return new AllocationFields(this);
+        }
+
+        public Builder projectId(long projectId) {
+            this.projectId = projectId;
+            return this;
+        }
+
+        public Builder userId(long userId) {
+            this.userId = userId;
+            return this;
+        }
+
+        public Builder firstDay(LocalDate firstDay) {
+            this.firstDay = firstDay;
+            return this;
+        }
+
+        public Builder lastDay(LocalDate lastDay) {
+            this.lastDay = lastDay;
+            return this;
+        }
+    }
+
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        AllocationFields that = (AllocationFields) o;
+
+        if (projectId != that.projectId) return false;
+        if (userId != that.userId) return false;
+        if (firstDay != null ? !firstDay.equals(that.firstDay) : that.firstDay != null)
+            return false;
+        return lastDay != null ? lastDay.equals(that.lastDay) : that.lastDay == null;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = (int) (projectId ^ (projectId >>> 32));
+        result = 31 * result + (int) (userId ^ (userId >>> 32));
+        result = 31 * result + (firstDay != null ? firstDay.hashCode() : 0);
+        result = 31 * result + (lastDay != null ? lastDay.hashCode() : 0);
+        return result;
+    }
+
+    @Override
+    public String toString() {
+        return "AllocationFields{" +
+            "projectId=" + projectId +
+            ", userId=" + userId +
+            ", firstDay=" + firstDay +
+            ", lastDay=" + lastDay +
+            '}';
+    }
+}
diff --git a/components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/data/AllocationRecord.java b/components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/data/AllocationRecord.java
new file mode 100644
index 0000000..6381534
--- /dev/null
+++ b/components/allocations/src/main/java/io/pivotal/pal/tracker/allocations/data/AllocationRecord.java
@@ -0,0 +1,98 @@
+package io.pivotal.pal.tracker.allocations.data;
+
+import java.time.LocalDate;
+
+public class AllocationRecord {
+
+    public final long id;
+    public final long projectId;
+    public final long userId;
+    public final LocalDate firstDay;
+    public final LocalDate lastDay;
+
+    public AllocationRecord(Builder builder) {
+        id = builder.id;
+        projectId = builder.projectId;
+        userId = builder.userId;
+        firstDay = builder.firstDay;
+        lastDay = builder.lastDay;
+    }
+
+    public static Builder allocationRecordBuilder() {
+        return new Builder();
+    }
+
+    public static class Builder {
+        private long id;
+        private long projectId;
+        private long userId;
+        private LocalDate firstDay;
+        private LocalDate lastDay;
+
+        public AllocationRecord build() {
+            return new AllocationRecord(this);
+        }
+
+        public Builder id(long id) {
+            this.id = id;
+            return this;
+        }
+
+        public Builder projectId(long projectId) {
+            this.projectId = projectId;
+            return this;
+        }
+
+        public Builder userId(long userId) {
+            this.userId = userId;
+            return this;
+        }
+
+        public Builder firstDay(LocalDate firstDay) {
+            this.firstDay = firstDay;
+            return this;
+        }
+
+        public Builder lastDay(LocalDate lastDay) {
+            this.lastDay = lastDay;
+            return this;
+        }
+    }
+
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        AllocationRecord that = (AllocationRecord) o;
+
+        if (id != that.id) return false;
+        if (projectId != that.projectId) return false;
+        if (userId != that.userId) return false;
+        if (firstDay != null ? !firstDay.equals(that.firstDay) : that.firstDay != null)
+            return false;
+        return lastDay != null ? lastDay.equals(that.lastDay) : that.lastDay == null;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = (int) (id ^ (id >>> 32));
+        result = 31 * result + (int) (projectId ^ (projectId >>> 32));
+        result = 31 * result + (int) (userId ^ (userId >>> 32));
+        result = 31 * result + (firstDay != null ? firstDay.hashCode() : 0);
+        result = 31 * result + (lastDay != null ? lastDay.hashCode() : 0);
+        return result;
+    }
+
+    @Override
+    public String toString() {
+        return "AllocationRecord{" +
+            "id=" + id +
+            ", projectId=" + projectId +
+            ", userId=" + userId +
+            ", firstDay=" + firstDay +
+            ", lastDay=" + lastDay +
+            '}';
+    }
+}
diff --git a/components/allocations/src/test/java/test/pivotal/pal/tracker/allocations/AllocationControllerTest.java b/components/allocations/src/test/java/test/pivotal/pal/tracker/allocations/AllocationControllerTest.java
new file mode 100644
index 0000000..4618004
--- /dev/null
+++ b/components/allocations/src/test/java/test/pivotal/pal/tracker/allocations/AllocationControllerTest.java
@@ -0,0 +1,93 @@
+package test.pivotal.pal.tracker.allocations;
+
+import io.pivotal.pal.tracker.allocations.*;
+import io.pivotal.pal.tracker.allocations.data.AllocationDataGateway;
+import io.pivotal.pal.tracker.allocations.data.AllocationRecord;
+import org.junit.Test;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+
+import java.time.LocalDate;
+import java.util.List;
+
+import static java.util.Arrays.asList;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyLong;
+import static org.mockito.Mockito.*;
+import static test.pivotal.pal.tracker.allocations.TestBuilders.*;
+
+
+public class AllocationControllerTest {
+
+    private AllocationDataGateway allocationDataGateway = mock(AllocationDataGateway.class);
+    private ProjectClient client = mock(ProjectClient.class);
+    private AllocationController allocationsController = new AllocationController(allocationDataGateway, client);
+
+
+    @Test
+    public void testCreate() {
+        AllocationRecord record = testAllocationRecordBuilder()
+            .id(20L)
+            .projectId(31L)
+            .firstDay(LocalDate.parse("2016-02-20"))
+            .build();
+        doReturn(record).when(allocationDataGateway).create(any());
+        doReturn(new ProjectInfo(true)).when(client).getProject(anyLong());
+
+
+        AllocationForm form = testAllocationFormBuilder()
+            .projectId(31L)
+            .firstDay("2016-02-20")
+            .build();
+        ResponseEntity<AllocationInfo> response = allocationsController.create(form);
+
+
+        verify(allocationDataGateway).create(testAllocationFieldsBuilder()
+            .projectId(31L)
+            .firstDay(LocalDate.parse("2016-02-20"))
+            .build()
+        );
+        verify(client).getProject(31L);
+
+        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);
+        assertThat(response.getBody()).isEqualTo(testAllocationInfoBuilder()
+            .id(20L)
+            .projectId(31L)
+            .firstDay("2016-02-20")
+            .build()
+        );
+    }
+
+    @Test
+    public void testCreate_WhenProjectIsNotActive() {
+        doReturn(new ProjectInfo(false)).when(client).getProject(anyLong());
+
+        AllocationForm form = testAllocationFormBuilder().build();
+
+
+        ResponseEntity<AllocationInfo> response = allocationsController.create(form);
+
+
+        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.SERVICE_UNAVAILABLE);
+    }
+
+    @Test
+    public void testList() {
+        List<AllocationRecord> records = asList(
+            testAllocationRecordBuilder().id(12L).build(),
+            testAllocationRecordBuilder().id(13L).build()
+        );
+        doReturn(records).when(allocationDataGateway).findAllByProjectId(anyLong());
+
+
+        List<AllocationInfo> result = allocationsController.list(13);
+
+
+        verify(allocationDataGateway).findAllByProjectId(13L);
+        assertThat(result).containsExactlyInAnyOrder(
+            testAllocationInfoBuilder().id(12L).build(),
+            testAllocationInfoBuilder().id(13L).build()
+        );
+    }
+}
diff --git a/components/allocations/src/test/java/test/pivotal/pal/tracker/allocations/AllocationDataGatewayTest.java b/components/allocations/src/test/java/test/pivotal/pal/tracker/allocations/AllocationDataGatewayTest.java
new file mode 100644
index 0000000..8c7e5ef
--- /dev/null
+++ b/components/allocations/src/test/java/test/pivotal/pal/tracker/allocations/AllocationDataGatewayTest.java
@@ -0,0 +1,74 @@
+package test.pivotal.pal.tracker.allocations;
+
+import io.pivotal.pal.tracker.allocations.data.AllocationDataGateway;
+import io.pivotal.pal.tracker.allocations.data.AllocationFields;
+import io.pivotal.pal.tracker.allocations.data.AllocationRecord;
+import io.pivotal.pal.tracker.testsupport.TestScenarioSupport;
+import org.junit.Before;
+import org.junit.Test;
+import org.springframework.jdbc.core.JdbcTemplate;
+
+import java.sql.Timestamp;
+import java.time.LocalDate;
+import java.util.List;
+import java.util.Map;
+
+import static io.pivotal.pal.tracker.allocations.data.AllocationFields.allocationFieldsBuilder;
+import static io.pivotal.pal.tracker.allocations.data.AllocationRecord.allocationRecordBuilder;
+import static org.assertj.core.api.Assertions.assertThat;
+
+public class AllocationDataGatewayTest {
+
+    private TestScenarioSupport testScenarioSupport = new TestScenarioSupport("tracker_allocations_test");
+    private JdbcTemplate template = testScenarioSupport.template;
+    private AllocationDataGateway gateway = new AllocationDataGateway(testScenarioSupport.dataSource);
+
+    @Before
+    public void setup() {
+        template.execute("delete from allocations;");
+    }
+
+    @Test
+    public void testCreate() {
+        AllocationFields fields = allocationFieldsBuilder()
+            .projectId(22L)
+            .userId(12L)
+            .firstDay(LocalDate.parse("2016-01-13"))
+            .lastDay(LocalDate.parse("2016-09-17"))
+            .build();
+
+
+        AllocationRecord created = gateway.create(fields);
+
+
+        assertThat(created.id).isNotNull();
+        assertThat(created.projectId).isEqualTo(22L);
+        assertThat(created.userId).isEqualTo(12L);
+        assertThat(created.firstDay).isEqualTo(LocalDate.parse("2016-01-13"));
+        assertThat(created.lastDay).isEqualTo(LocalDate.parse("2016-09-17"));
+
+        Map<String, Object> persisted = template.queryForMap("select * from allocations WHERE id = ?", created.id);
+
+        assertThat(persisted.get("project_id")).isEqualTo(22L);
+        assertThat(persisted.get("user_id")).isEqualTo(12L);
+        assertThat(persisted.get("first_day")).isEqualTo(Timestamp.valueOf("2016-01-13 00:00:00"));
+        assertThat(persisted.get("last_day")).isEqualTo(Timestamp.valueOf("2016-09-17 00:00:00"));
+    }
+
+    @Test
+    public void testFindAllByProjectId() {
+        template.execute("insert into allocations (id, project_id, user_id, first_day, last_day) values (97336, 22, 12, '2016-01-13', '2016-09-17')");
+
+
+        List<AllocationRecord> result = gateway.findAllByProjectId(22L);
+
+
+        assertThat(result).containsExactly(allocationRecordBuilder()
+            .id(97336L)
+            .projectId(22L)
+            .userId(12L)
+            .firstDay(LocalDate.parse("2016-01-13"))
+            .lastDay(LocalDate.parse("2016-09-17"))
+            .build());
+    }
+}
diff --git a/components/allocations/src/test/java/test/pivotal/pal/tracker/allocations/TestBuilders.java b/components/allocations/src/test/java/test/pivotal/pal/tracker/allocations/TestBuilders.java
new file mode 100644
index 0000000..0caedc7
--- /dev/null
+++ b/components/allocations/src/test/java/test/pivotal/pal/tracker/allocations/TestBuilders.java
@@ -0,0 +1,51 @@
+package test.pivotal.pal.tracker.allocations;
+
+import io.pivotal.pal.tracker.allocations.AllocationForm;
+import io.pivotal.pal.tracker.allocations.AllocationInfo;
+import io.pivotal.pal.tracker.allocations.data.AllocationFields;
+import io.pivotal.pal.tracker.allocations.data.AllocationRecord;
+
+import java.time.LocalDate;
+
+import static io.pivotal.pal.tracker.allocations.AllocationForm.allocationFormBuilder;
+import static io.pivotal.pal.tracker.allocations.AllocationInfo.allocationInfoBuilder;
+import static io.pivotal.pal.tracker.allocations.data.AllocationFields.allocationFieldsBuilder;
+import static io.pivotal.pal.tracker.allocations.data.AllocationRecord.allocationRecordBuilder;
+
+public class TestBuilders {
+
+    public static AllocationRecord.Builder testAllocationRecordBuilder() {
+        return allocationRecordBuilder()
+            .id(12L)
+            .projectId(13L)
+            .userId(14L)
+            .firstDay(LocalDate.parse("2016-02-22"))
+            .lastDay(LocalDate.parse("2017-02-23"));
+    }
+
+    public static AllocationFields.Builder testAllocationFieldsBuilder() {
+        return allocationFieldsBuilder()
+            .projectId(13L)
+            .userId(14L)
+            .firstDay(LocalDate.parse("2016-02-22"))
+            .lastDay(LocalDate.parse("2017-02-23"));
+    }
+
+    public static AllocationForm.Builder testAllocationFormBuilder() {
+        return allocationFormBuilder()
+            .projectId(13L)
+            .userId(14L)
+            .firstDay("2016-02-22")
+            .lastDay("2017-02-23");
+    }
+
+    public static AllocationInfo.Builder testAllocationInfoBuilder() {
+        return allocationInfoBuilder()
+            .id(12L)
+            .projectId(13L)
+            .userId(14L)
+            .firstDay("2016-02-22")
+            .lastDay("2017-02-23")
+            .info("allocation info");
+    }
+}
diff --git a/components/backlog/build.gradle b/components/backlog/build.gradle
new file mode 100644
index 0000000..4526bf7
--- /dev/null
+++ b/components/backlog/build.gradle
@@ -0,0 +1,6 @@
+dependencies {
+    compile project(":components:rest-support")
+    compile "org.springframework:spring-jdbc:$springVersion"
+
+    testCompile project(":components:test-support")
+}
diff --git a/components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/ProjectClient.java b/components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/ProjectClient.java
new file mode 100644
index 0000000..3cdd67d
--- /dev/null
+++ b/components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/ProjectClient.java
@@ -0,0 +1,18 @@
+package io.pivotal.pal.tracker.backlog;
+
+import org.springframework.web.client.RestOperations;
+
+public class ProjectClient {
+
+    private final RestOperations restOperations;
+    private final String endpoint;
+
+    public ProjectClient(RestOperations restOperations, String registrationServerEndpoint) {
+        this.restOperations = restOperations;
+        this.endpoint = registrationServerEndpoint;
+    }
+
+    public ProjectInfo getProject(long projectId) {
+        return restOperations.getForObject(endpoint + "/projects/" + projectId, ProjectInfo.class);
+    }
+}
diff --git a/components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/ProjectInfo.java b/components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/ProjectInfo.java
new file mode 100644
index 0000000..9f40610
--- /dev/null
+++ b/components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/ProjectInfo.java
@@ -0,0 +1,37 @@
+package io.pivotal.pal.tracker.backlog;
+
+public class ProjectInfo {
+
+    public final boolean active;
+
+    private ProjectInfo() {
+        this(false);
+    }
+
+    public ProjectInfo(boolean active) {
+        this.active = active;
+    }
+
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        ProjectInfo that = (ProjectInfo) o;
+
+        return active == that.active;
+    }
+
+    @Override
+    public int hashCode() {
+        return (active ? 1 : 0);
+    }
+
+    @Override
+    public String toString() {
+        return "ProjectInfo{" +
+            "active=" + active +
+            '}';
+    }
+}
diff --git a/components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/StoryController.java b/components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/StoryController.java
new file mode 100644
index 0000000..fc5c11f
--- /dev/null
+++ b/components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/StoryController.java
@@ -0,0 +1,66 @@
+package io.pivotal.pal.tracker.backlog;
+
+import io.pivotal.pal.tracker.backlog.data.StoryDataGateway;
+import io.pivotal.pal.tracker.backlog.data.StoryFields;
+import io.pivotal.pal.tracker.backlog.data.StoryRecord;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+import static io.pivotal.pal.tracker.backlog.StoryInfo.storyInfoBuilder;
+import static io.pivotal.pal.tracker.backlog.data.StoryFields.storyFieldsBuilder;
+import static java.util.stream.Collectors.toList;
+
+@RestController
+@RequestMapping("/stories")
+public class StoryController {
+    private final StoryDataGateway gateway;
+    private final ProjectClient client;
+
+    public StoryController(StoryDataGateway gateway, ProjectClient client) {
+        this.gateway = gateway;
+        this.client = client;
+    }
+
+
+    @PostMapping
+    public ResponseEntity<StoryInfo> create(@RequestBody StoryForm form) {
+        if (projectIsActive(form.projectId)) {
+            StoryRecord record = gateway.create(mapToFields(form));
+            return new ResponseEntity<>(present(record), HttpStatus.CREATED);
+        }
+
+        return new ResponseEntity<>(HttpStatus.SERVICE_UNAVAILABLE);
+    }
+
+    @GetMapping
+    public List<StoryInfo> list(@RequestParam long projectId) {
+        return gateway.findAllByProjectId(projectId).stream()
+            .map(this::present)
+            .collect(toList());
+    }
+
+
+    private boolean projectIsActive(long projectId) {
+        ProjectInfo project = client.getProject(projectId);
+        return project != null && project.active;
+    }
+
+    private StoryFields mapToFields(StoryForm form) {
+        return storyFieldsBuilder()
+            .projectId(form.projectId)
+            .name(form.name)
+            .build();
+    }
+
+    private StoryInfo present(StoryRecord record) {
+        return storyInfoBuilder()
+            .id(record.id)
+            .projectId(record.projectId)
+            .name(record.name)
+            .info("story info")
+            .build();
+    }
+}
diff --git a/components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/StoryForm.java b/components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/StoryForm.java
new file mode 100644
index 0000000..4c26ab2
--- /dev/null
+++ b/components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/StoryForm.java
@@ -0,0 +1,66 @@
+package io.pivotal.pal.tracker.backlog;
+
+public class StoryForm {
+
+    public final long projectId;
+    public final String name;
+
+    private StoryForm() {
+        this(storyFormBuilder());
+    }
+
+    private StoryForm(Builder builder) {
+        projectId = builder.projectId;
+        name = builder.name;
+    }
+
+    public static Builder storyFormBuilder() {
+        return new Builder();
+    }
+
+
+    public static class Builder {
+        private long projectId;
+        private String name;
+
+        public StoryForm build() {
+            return new StoryForm(this);
+        }
+
+        public Builder projectId(long projectId) {
+            this.projectId = projectId;
+            return this;
+        }
+
+        public Builder name(String name) {
+            this.name = name;
+            return this;
+        }
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        StoryForm storyForm = (StoryForm) o;
+
+        if (projectId != storyForm.projectId) return false;
+        return name != null ? name.equals(storyForm.name) : storyForm.name == null;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = (int) (projectId ^ (projectId >>> 32));
+        result = 31 * result + (name != null ? name.hashCode() : 0);
+        return result;
+    }
+
+    @Override
+    public String toString() {
+        return "StoryForm{" +
+            "projectId=" + projectId +
+            ", name='" + name + '\'' +
+            '}';
+    }
+}
diff --git a/components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/StoryInfo.java b/components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/StoryInfo.java
new file mode 100644
index 0000000..b5bbb19
--- /dev/null
+++ b/components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/StoryInfo.java
@@ -0,0 +1,89 @@
+package io.pivotal.pal.tracker.backlog;
+
+public class StoryInfo {
+
+    public final long id;
+    public final long projectId;
+    public final String name;
+    public final String info;
+
+    private StoryInfo() {
+        this(storyInfoBuilder());
+    }
+
+    private StoryInfo(Builder builder) {
+        id = builder.id;
+        projectId = builder.projectId;
+        name = builder.name;
+        info = builder.info;
+    }
+
+    public static Builder storyInfoBuilder() {
+        return new Builder();
+    }
+
+
+    public static class Builder {
+        private long id;
+        private long projectId;
+        private String name;
+        private String info;
+
+        public StoryInfo build() {
+            return new StoryInfo(this);
+        }
+
+        public Builder id(long id) {
+            this.id = id;
+            return this;
+        }
+
+        public Builder projectId(long projectId) {
+            this.projectId = projectId;
+            return this;
+        }
+
+        public Builder name(String name) {
+            this.name = name;
+            return this;
+        }
+
+        public Builder info(String info) {
+            this.info = info;
+            return this;
+        }
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        StoryInfo storyInfo = (StoryInfo) o;
+
+        if (id != storyInfo.id) return false;
+        if (projectId != storyInfo.projectId) return false;
+        if (name != null ? !name.equals(storyInfo.name) : storyInfo.name != null)
+            return false;
+        return info != null ? info.equals(storyInfo.info) : storyInfo.info == null;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = (int) (id ^ (id >>> 32));
+        result = 31 * result + (int) (projectId ^ (projectId >>> 32));
+        result = 31 * result + (name != null ? name.hashCode() : 0);
+        result = 31 * result + (info != null ? info.hashCode() : 0);
+        return result;
+    }
+
+    @Override
+    public String toString() {
+        return "StoryInfo{" +
+            "id=" + id +
+            ", projectId=" + projectId +
+            ", name='" + name + '\'' +
+            ", info='" + info + '\'' +
+            '}';
+    }
+}
diff --git a/components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/data/StoryDataGateway.java b/components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/data/StoryDataGateway.java
new file mode 100644
index 0000000..5c28edb
--- /dev/null
+++ b/components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/data/StoryDataGateway.java
@@ -0,0 +1,61 @@
+package io.pivotal.pal.tracker.backlog.data;
+
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.core.RowMapper;
+import org.springframework.jdbc.support.GeneratedKeyHolder;
+import org.springframework.jdbc.support.KeyHolder;
+import org.springframework.stereotype.Repository;
+
+import javax.sql.DataSource;
+import java.sql.PreparedStatement;
+import java.util.List;
+
+import static io.pivotal.pal.tracker.backlog.data.StoryRecord.storyRecordBuilder;
+import static java.sql.Statement.RETURN_GENERATED_KEYS;
+
+@Repository
+public class StoryDataGateway {
+    private final JdbcTemplate jdbcTemplate;
+
+    public StoryDataGateway(DataSource dataSource) {
+        this.jdbcTemplate = new JdbcTemplate(dataSource);
+    }
+
+    public StoryRecord create(StoryFields fields) {
+        KeyHolder keyHolder = new GeneratedKeyHolder();
+
+        jdbcTemplate.update(connection -> {
+            PreparedStatement ps = connection.prepareStatement(
+                "insert into stories (project_id, name) values (?, ?)", RETURN_GENERATED_KEYS
+            );
+
+            ps.setLong(1, fields.projectId);
+            ps.setString(2, fields.name);
+            return ps;
+        }, keyHolder);
+
+        return find(keyHolder.getKey().longValue());
+    }
+
+    public List<StoryRecord> findAllByProjectId(Long projectId) {
+        return jdbcTemplate.query(
+            "select id, project_id, name from stories where project_id = ?",
+            rowMapper, projectId
+        );
+    }
+
+
+    private StoryRecord find(long id) {
+        return jdbcTemplate.queryForObject(
+            "select id, project_id, name from stories where id = ?",
+            rowMapper, id
+        );
+    }
+
+    private RowMapper<StoryRecord> rowMapper
+        = (rs, num) -> storyRecordBuilder()
+        .id(rs.getLong("id"))
+        .projectId(rs.getLong("project_id"))
+        .name(rs.getString("name"))
+        .build();
+}
diff --git a/components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/data/StoryFields.java b/components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/data/StoryFields.java
new file mode 100644
index 0000000..ce36232
--- /dev/null
+++ b/components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/data/StoryFields.java
@@ -0,0 +1,61 @@
+package io.pivotal.pal.tracker.backlog.data;
+
+public class StoryFields {
+
+    public final long projectId;
+    public final String name;
+
+    private StoryFields(Builder builder) {
+        projectId = builder.projectId;
+        name = builder.name;
+    }
+
+    public static Builder storyFieldsBuilder() {
+        return new Builder();
+    }
+
+    public static class Builder {
+        private long projectId;
+        private String name;
+
+        public StoryFields build() {
+            return new StoryFields(this);
+        }
+
+        public Builder projectId(long projectId) {
+            this.projectId = projectId;
+            return this;
+        }
+
+        public Builder name(String name) {
+            this.name = name;
+            return this;
+        }
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        StoryFields that = (StoryFields) o;
+
+        if (projectId != that.projectId) return false;
+        return name != null ? name.equals(that.name) : that.name == null;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = (int) (projectId ^ (projectId >>> 32));
+        result = 31 * result + (name != null ? name.hashCode() : 0);
+        return result;
+    }
+
+    @Override
+    public String toString() {
+        return "StoryFields{" +
+            "projectId=" + projectId +
+            ", name='" + name + '\'' +
+            '}';
+    }
+}
diff --git a/components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/data/StoryRecord.java b/components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/data/StoryRecord.java
new file mode 100644
index 0000000..ad98d9a
--- /dev/null
+++ b/components/backlog/src/main/java/io/pivotal/pal/tracker/backlog/data/StoryRecord.java
@@ -0,0 +1,72 @@
+package io.pivotal.pal.tracker.backlog.data;
+
+public class StoryRecord {
+
+    public final long id;
+    public final long projectId;
+    public final String name;
+
+    private StoryRecord(Builder builder) {
+        id = builder.id;
+        projectId = builder.projectId;
+        name = builder.name;
+    }
+
+    public static Builder storyRecordBuilder() {
+        return new Builder();
+    }
+
+    public static class Builder {
+        private long id;
+        private long projectId;
+        private String name;
+
+        public StoryRecord build() {
+            return new StoryRecord(this);
+        }
+
+        public Builder id(long id) {
+            this.id = id;
+            return this;
+        }
+
+        public Builder projectId(long projectId) {
+            this.projectId = projectId;
+            return this;
+        }
+
+        public Builder name(String name) {
+            this.name = name;
+            return this;
+        }
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        StoryRecord that = (StoryRecord) o;
+
+        if (id != that.id) return false;
+        if (projectId != that.projectId) return false;
+        return name != null ? name.equals(that.name) : that.name == null;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = (int) (id ^ (id >>> 32));
+        result = 31 * result + (int) (projectId ^ (projectId >>> 32));
+        result = 31 * result + (name != null ? name.hashCode() : 0);
+        return result;
+    }
+
+    @Override
+    public String toString() {
+        return "StoryRecord{" +
+            "id=" + id +
+            ", projectId=" + projectId +
+            ", name='" + name + '\'' +
+            '}';
+    }
+}
diff --git a/components/backlog/src/test/java/test/pivotal/pal/tracker/backlog/StoryControllerTest.java b/components/backlog/src/test/java/test/pivotal/pal/tracker/backlog/StoryControllerTest.java
new file mode 100644
index 0000000..2405438
--- /dev/null
+++ b/components/backlog/src/test/java/test/pivotal/pal/tracker/backlog/StoryControllerTest.java
@@ -0,0 +1,98 @@
+package test.pivotal.pal.tracker.backlog;
+
+import io.pivotal.pal.tracker.backlog.*;
+import io.pivotal.pal.tracker.backlog.data.StoryDataGateway;
+import io.pivotal.pal.tracker.backlog.data.StoryRecord;
+import org.junit.Test;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+
+import java.util.List;
+
+import static io.pivotal.pal.tracker.backlog.StoryForm.storyFormBuilder;
+import static io.pivotal.pal.tracker.backlog.StoryInfo.storyInfoBuilder;
+import static io.pivotal.pal.tracker.backlog.data.StoryFields.storyFieldsBuilder;
+import static io.pivotal.pal.tracker.backlog.data.StoryRecord.storyRecordBuilder;
+import static java.util.Arrays.asList;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.mockito.ArgumentMatchers.anyLong;
+import static org.mockito.Mockito.*;
+import static test.pivotal.pal.tracker.backlog.TestBuilders.*;
+
+public class StoryControllerTest {
+
+    private StoryDataGateway storyDataGateway = mock(StoryDataGateway.class);
+    private ProjectClient client = mock(ProjectClient.class);
+    private StoryController storyController = new StoryController(storyDataGateway, client);
+
+    @Test
+    public void testCreate() {
+        StoryRecord record = storyRecordBuilder()
+            .id(4L)
+            .projectId(3L)
+            .name("Something Fun")
+            .build();
+
+        doReturn(record).when(storyDataGateway).create(
+            storyFieldsBuilder().projectId(3L).name("Something Fun").build()
+        );
+
+        doReturn(new ProjectInfo(true)).when(client).getProject(anyLong());
+
+        StoryForm form = storyFormBuilder()
+            .projectId(3L)
+            .name("Something Fun")
+            .build();
+
+
+        ResponseEntity<StoryInfo> response = storyController.create(form);
+
+
+        verify(client).getProject(3L);
+
+        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);
+        assertThat(response.getBody()).isEqualTo(storyInfoBuilder()
+            .id(4L)
+            .projectId(3L)
+            .name("Something Fun")
+            .info("story info")
+            .build()
+        );
+    }
+
+    @Test
+    public void testFailedCreate() {
+        doReturn(new ProjectInfo(false)).when(client).getProject(anyLong());
+
+        StoryForm form = testStoryFormBuilder()
+            .projectId(3L)
+            .build();
+
+
+        ResponseEntity<StoryInfo> response = storyController.create(form);
+
+
+        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.SERVICE_UNAVAILABLE);
+    }
+
+    @Test
+    public void testList() {
+        List<StoryRecord> records = asList(
+            testStoryRecordBuilder().id(12L).build(),
+            testStoryRecordBuilder().id(13L).build()
+        );
+
+        doReturn(records).when(storyDataGateway).findAllByProjectId(anyLong());
+
+
+        List<StoryInfo> result = storyController.list(13);
+
+
+        verify(storyDataGateway).findAllByProjectId(13L);
+
+        assertThat(result).containsExactlyInAnyOrder(
+            testStoryInfoBuilder().id(12L).build(),
+            testStoryInfoBuilder().id(13L).build()
+        );
+    }
+}
diff --git a/components/backlog/src/test/java/test/pivotal/pal/tracker/backlog/TestBuilders.java b/components/backlog/src/test/java/test/pivotal/pal/tracker/backlog/TestBuilders.java
new file mode 100644
index 0000000..0e786d4
--- /dev/null
+++ b/components/backlog/src/test/java/test/pivotal/pal/tracker/backlog/TestBuilders.java
@@ -0,0 +1,41 @@
+package test.pivotal.pal.tracker.backlog;
+
+import io.pivotal.pal.tracker.backlog.StoryForm;
+import io.pivotal.pal.tracker.backlog.StoryInfo;
+import io.pivotal.pal.tracker.backlog.data.StoryFields;
+import io.pivotal.pal.tracker.backlog.data.StoryRecord;
+
+import static io.pivotal.pal.tracker.backlog.StoryForm.storyFormBuilder;
+import static io.pivotal.pal.tracker.backlog.StoryInfo.storyInfoBuilder;
+import static io.pivotal.pal.tracker.backlog.data.StoryFields.storyFieldsBuilder;
+import static io.pivotal.pal.tracker.backlog.data.StoryRecord.storyRecordBuilder;
+
+public class TestBuilders {
+
+    public static StoryRecord.Builder testStoryRecordBuilder() {
+        return storyRecordBuilder()
+            .id(4L)
+            .projectId(3L)
+            .name("Something Fun");
+    }
+
+    public static StoryFields.Builder testStoryFieldsBuilder() {
+        return storyFieldsBuilder()
+            .projectId(3L)
+            .name("Something Fun");
+    }
+
+    public static StoryInfo.Builder testStoryInfoBuilder() {
+        return storyInfoBuilder()
+            .id(4L)
+            .projectId(3L)
+            .name("Something Fun")
+            .info("story info");
+    }
+
+    public static StoryForm.Builder testStoryFormBuilder() {
+        return storyFormBuilder()
+            .projectId(3L)
+            .name("Something Fun");
+    }
+}
diff --git a/components/backlog/src/test/java/test/pivotal/pal/tracker/backlog/data/StoryDataGatewayTest.java b/components/backlog/src/test/java/test/pivotal/pal/tracker/backlog/data/StoryDataGatewayTest.java
new file mode 100644
index 0000000..e6d705b
--- /dev/null
+++ b/components/backlog/src/test/java/test/pivotal/pal/tracker/backlog/data/StoryDataGatewayTest.java
@@ -0,0 +1,66 @@
+package test.pivotal.pal.tracker.backlog.data;
+
+import io.pivotal.pal.tracker.backlog.data.StoryDataGateway;
+import io.pivotal.pal.tracker.backlog.data.StoryFields;
+import io.pivotal.pal.tracker.backlog.data.StoryRecord;
+import io.pivotal.pal.tracker.testsupport.TestScenarioSupport;
+import org.junit.Before;
+import org.junit.Test;
+import org.springframework.jdbc.core.JdbcTemplate;
+
+import java.util.List;
+import java.util.Map;
+
+import static io.pivotal.pal.tracker.backlog.data.StoryFields.storyFieldsBuilder;
+import static io.pivotal.pal.tracker.backlog.data.StoryRecord.storyRecordBuilder;
+import static org.assertj.core.api.Assertions.assertThat;
+
+public class StoryDataGatewayTest {
+
+    private TestScenarioSupport testScenarioSupport = new TestScenarioSupport("tracker_backlog_test");
+    private JdbcTemplate template = testScenarioSupport.template;
+    private StoryDataGateway gateway = new StoryDataGateway(testScenarioSupport.dataSource);
+
+    @Before
+    public void setUp() throws Exception {
+        template.execute("DELETE FROM stories;");
+    }
+
+    @Test
+    public void testCreate() {
+        StoryFields fields = storyFieldsBuilder()
+            .projectId(22L)
+            .name("aStory")
+            .build();
+
+
+        StoryRecord created = gateway.create(fields);
+
+
+        assertThat(created.id).isNotNull();
+        assertThat(created.name).isEqualTo("aStory");
+        assertThat(created.projectId).isEqualTo(22L);
+
+        Map<String, Object> persisted = template.queryForMap("select * from stories where id = ?", created.id);
+
+        assertThat(persisted.get("project_id")).isEqualTo(22L);
+        assertThat(persisted.get("name")).isEqualTo("aStory");
+    }
+
+    @Test
+    public void testFindBy() {
+        template.execute("insert into stories (id, project_id, name) values (1346, 22, 'aStory')");
+
+
+        List<StoryRecord> result = gateway.findAllByProjectId(22L);
+
+
+        assertThat(result).containsExactly(
+            storyRecordBuilder()
+                .id(1346L)
+                .projectId(22L)
+                .name("aStory")
+                .build()
+        );
+    }
+}
diff --git a/components/build.gradle b/components/build.gradle
new file mode 100644
index 0000000..06f3dca
--- /dev/null
+++ b/components/build.gradle
@@ -0,0 +1,2 @@
+subprojects {
+}
\ No newline at end of file
diff --git a/components/projects/build.gradle b/components/projects/build.gradle
new file mode 100644
index 0000000..4526bf7
--- /dev/null
+++ b/components/projects/build.gradle
@@ -0,0 +1,6 @@
+dependencies {
+    compile project(":components:rest-support")
+    compile "org.springframework:spring-jdbc:$springVersion"
+
+    testCompile project(":components:test-support")
+}
diff --git a/components/projects/src/main/java/io/pivotal/pal/tracker/projects/ProjectController.java b/components/projects/src/main/java/io/pivotal/pal/tracker/projects/ProjectController.java
new file mode 100644
index 0000000..03855ab
--- /dev/null
+++ b/components/projects/src/main/java/io/pivotal/pal/tracker/projects/ProjectController.java
@@ -0,0 +1,69 @@
+package io.pivotal.pal.tracker.projects;
+
+import io.pivotal.pal.tracker.projects.data.ProjectDataGateway;
+import io.pivotal.pal.tracker.projects.data.ProjectFields;
+import io.pivotal.pal.tracker.projects.data.ProjectRecord;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+import static io.pivotal.pal.tracker.projects.ProjectInfo.projectInfoBuilder;
+import static io.pivotal.pal.tracker.projects.data.ProjectFields.projectFieldsBuilder;
+import static java.util.stream.Collectors.toList;
+
+@RestController
+@RequestMapping("/projects")
+public class ProjectController {
+
+    private final ProjectDataGateway gateway;
+
+    public ProjectController(ProjectDataGateway gateway) {
+        this.gateway = gateway;
+    }
+
+    @PostMapping
+    public ResponseEntity<ProjectInfo> create(@RequestBody ProjectForm form) {
+        ProjectRecord record = gateway.create(formToFields(form));
+        return new ResponseEntity<>(present(record), HttpStatus.CREATED);
+    }
+
+    @GetMapping
+    public List<ProjectInfo> list(@RequestParam long accountId) {
+        return gateway.findAllByAccountId(accountId)
+            .stream()
+            .map(this::present)
+            .collect(toList());
+    }
+
+    @GetMapping("/{projectId}")
+    public ProjectInfo get(@PathVariable long projectId) {
+        ProjectRecord record = gateway.find(projectId);
+
+        if (record != null) {
+            return present(record);
+        }
+
+        return null;
+    }
+
+
+    private ProjectFields formToFields(ProjectForm form) {
+        return projectFieldsBuilder()
+            .accountId(form.accountId)
+            .name(form.name)
+            .active(form.active)
+            .build();
+    }
+
+    private ProjectInfo present(ProjectRecord record) {
+        return projectInfoBuilder()
+            .id(record.id)
+            .accountId(record.accountId)
+            .name(record.name)
+            .active(record.active)
+            .info("project info")
+            .build();
+    }
+}
diff --git a/components/projects/src/main/java/io/pivotal/pal/tracker/projects/ProjectForm.java b/components/projects/src/main/java/io/pivotal/pal/tracker/projects/ProjectForm.java
new file mode 100644
index 0000000..a29ef8a
--- /dev/null
+++ b/components/projects/src/main/java/io/pivotal/pal/tracker/projects/ProjectForm.java
@@ -0,0 +1,76 @@
+package io.pivotal.pal.tracker.projects;
+
+public class ProjectForm {
+
+    public final long accountId;
+    public final String name;
+    public final boolean active;
+
+    private ProjectForm() {
+        this(projectFormBuilder());
+    }
+
+    public ProjectForm(Builder builder) {
+        accountId = builder.accountId;
+        name = builder.name;
+        active = builder.active;
+    }
+
+    public static Builder projectFormBuilder() {
+        return new Builder();
+    }
+
+    public static class Builder {
+        private long accountId;
+        private String name;
+        private boolean active;
+
+        public ProjectForm build() {
+            return new ProjectForm(this);
+        }
+
+        public Builder accountId(long accountId) {
+            this.accountId = accountId;
+            return this;
+        }
+
+        public Builder name(String name) {
+            this.name = name;
+            return this;
+        }
+
+        public Builder active(boolean active) {
+            this.active = active;
+            return this;
+        }
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        ProjectForm that = (ProjectForm) o;
+
+        if (accountId != that.accountId) return false;
+        if (active != that.active) return false;
+        return name != null ? name.equals(that.name) : that.name == null;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = (int) (accountId ^ (accountId >>> 32));
+        result = 31 * result + (name != null ? name.hashCode() : 0);
+        result = 31 * result + (active ? 1 : 0);
+        return result;
+    }
+
+    @Override
+    public String toString() {
+        return "ProjectForm{" +
+            "accountId=" + accountId +
+            ", name='" + name + '\'' +
+            ", active=" + active +
+            '}';
+    }
+}
diff --git a/components/projects/src/main/java/io/pivotal/pal/tracker/projects/ProjectInfo.java b/components/projects/src/main/java/io/pivotal/pal/tracker/projects/ProjectInfo.java
new file mode 100644
index 0000000..3819206
--- /dev/null
+++ b/components/projects/src/main/java/io/pivotal/pal/tracker/projects/ProjectInfo.java
@@ -0,0 +1,99 @@
+package io.pivotal.pal.tracker.projects;
+
+public class ProjectInfo {
+
+    public final long id;
+    public final long accountId;
+    public final String name;
+    public final boolean active;
+    public final String info;
+
+    private ProjectInfo() {
+        this(projectInfoBuilder());
+    }
+
+    public ProjectInfo(Builder builder) {
+        id = builder.id;
+        accountId = builder.accountId;
+        name = builder.name;
+        active = builder.active;
+        info = builder.info;
+    }
+
+    public static Builder projectInfoBuilder() {
+        return new Builder();
+    }
+
+    public static class Builder {
+        private long id;
+        private long accountId;
+        private String name;
+        private boolean active;
+        private String info;
+
+        public ProjectInfo build() {
+            return new ProjectInfo(this);
+        }
+
+        public Builder id(long id) {
+            this.id = id;
+            return this;
+        }
+
+        public Builder accountId(long accountId) {
+            this.accountId = accountId;
+            return this;
+        }
+
+        public Builder name(String name) {
+            this.name = name;
+            return this;
+        }
+
+        public Builder active(boolean active) {
+            this.active = active;
+            return this;
+        }
+
+        public Builder info(String info) {
+            this.info = info;
+            return this;
+        }
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        ProjectInfo that = (ProjectInfo) o;
+
+        if (id != that.id) return false;
+        if (accountId != that.accountId) return false;
+        if (active != that.active) return false;
+        if (name != null ? !name.equals(that.name) : that.name != null)
+            return false;
+        return info != null ? info.equals(that.info) : that.info == null;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = (int) (id ^ (id >>> 32));
+        result = 31 * result + (int) (accountId ^ (accountId >>> 32));
+        result = 31 * result + (name != null ? name.hashCode() : 0);
+        result = 31 * result + (active ? 1 : 0);
+        result = 31 * result + (info != null ? info.hashCode() : 0);
+        return result;
+    }
+
+    @Override
+    public String toString() {
+        return "ProjectInfo{" +
+            "id=" + id +
+            ", accountId=" + accountId +
+            ", name='" + name + '\'' +
+            ", active=" + active +
+            ", info='" + info + '\'' +
+            '}';
+    }
+}
diff --git a/components/projects/src/main/java/io/pivotal/pal/tracker/projects/data/ProjectDataGateway.java b/components/projects/src/main/java/io/pivotal/pal/tracker/projects/data/ProjectDataGateway.java
new file mode 100644
index 0000000..af13ae2
--- /dev/null
+++ b/components/projects/src/main/java/io/pivotal/pal/tracker/projects/data/ProjectDataGateway.java
@@ -0,0 +1,69 @@
+package io.pivotal.pal.tracker.projects.data;
+
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.core.RowMapper;
+import org.springframework.jdbc.support.GeneratedKeyHolder;
+import org.springframework.jdbc.support.KeyHolder;
+import org.springframework.stereotype.Repository;
+
+import javax.sql.DataSource;
+import java.sql.PreparedStatement;
+import java.util.List;
+
+import static io.pivotal.pal.tracker.projects.data.ProjectRecord.projectRecordBuilder;
+import static java.sql.Statement.RETURN_GENERATED_KEYS;
+
+@Repository
+public class ProjectDataGateway {
+
+    private final JdbcTemplate jdbcTemplate;
+
+    public ProjectDataGateway(DataSource dataSource) {
+        this.jdbcTemplate = new JdbcTemplate(dataSource);
+    }
+
+
+    public ProjectRecord create(ProjectFields fields) {
+        KeyHolder keyholder = new GeneratedKeyHolder();
+
+        jdbcTemplate.update(connection -> {
+            PreparedStatement ps = connection.prepareStatement(
+                "insert into projects (account_id, name, active) values (?, ?, ?)", RETURN_GENERATED_KEYS);
+            ps.setLong(1, fields.accountId);
+            ps.setString(2, fields.name);
+            ps.setBoolean(3, true);
+            return ps;
+        }, keyholder);
+
+        return find(keyholder.getKey().longValue());
+    }
+
+    public List<ProjectRecord> findAllByAccountId(Long accountId) {
+        return jdbcTemplate.query(
+            "select id, account_id, name, active from projects where account_id = ? order by name asc",
+            rowMapper, accountId
+        );
+    }
+
+    public ProjectRecord find(long id) {
+        List<ProjectRecord> list = jdbcTemplate.query(
+            "select id, account_id, name, active from projects where id = ? order by name asc",
+            rowMapper, id
+        );
+
+        if (list.isEmpty()) {
+            return null;
+        }
+
+        return list.get(0);
+    }
+
+
+    private RowMapper<ProjectRecord> rowMapper =
+        (rs, num) -> projectRecordBuilder()
+            .id(rs.getLong("id"))
+            .accountId(rs.getLong("account_id"))
+            .name(rs.getString("name"))
+            .active(rs.getBoolean("active"))
+            .build();
+}
diff --git a/components/projects/src/main/java/io/pivotal/pal/tracker/projects/data/ProjectFields.java b/components/projects/src/main/java/io/pivotal/pal/tracker/projects/data/ProjectFields.java
new file mode 100644
index 0000000..0be1274
--- /dev/null
+++ b/components/projects/src/main/java/io/pivotal/pal/tracker/projects/data/ProjectFields.java
@@ -0,0 +1,74 @@
+package io.pivotal.pal.tracker.projects.data;
+
+public class ProjectFields {
+
+    public final long accountId;
+    public final String name;
+    public final boolean active;
+
+    private ProjectFields(Builder builder) {
+        accountId = builder.accountId;
+        name = builder.name;
+        active = builder.active;
+    }
+
+    public static Builder projectFieldsBuilder() {
+        return new Builder();
+    }
+
+    public static class Builder {
+
+        private long accountId;
+        private String name;
+        private boolean active;
+
+        public ProjectFields build() {
+            return new ProjectFields(this);
+        }
+
+        public Builder accountId(long accountId) {
+            this.accountId = accountId;
+            return this;
+        }
+
+        public Builder name(String name) {
+            this.name = name;
+            return this;
+        }
+
+        public Builder active(boolean active) {
+            this.active = active;
+            return this;
+        }
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        ProjectFields that = (ProjectFields) o;
+
+        if (accountId != that.accountId) return false;
+        if (active != that.active) return false;
+        return name != null ? name.equals(that.name) : that.name == null;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = (int) (accountId ^ (accountId >>> 32));
+        result = 31 * result + (name != null ? name.hashCode() : 0);
+        result = 31 * result + (active ? 1 : 0);
+        return result;
+    }
+
+    @Override
+    public String toString() {
+        return "ProjectFields{" +
+            "accountId=" + accountId +
+            ", name='" + name + '\'' +
+            ", active=" + active +
+            '}';
+    }
+}
+
diff --git a/components/projects/src/main/java/io/pivotal/pal/tracker/projects/data/ProjectRecord.java b/components/projects/src/main/java/io/pivotal/pal/tracker/projects/data/ProjectRecord.java
new file mode 100644
index 0000000..14e3950
--- /dev/null
+++ b/components/projects/src/main/java/io/pivotal/pal/tracker/projects/data/ProjectRecord.java
@@ -0,0 +1,84 @@
+package io.pivotal.pal.tracker.projects.data;
+
+public class ProjectRecord {
+
+    public final long id;
+    public final long accountId;
+    public final String name;
+    public final boolean active;
+
+    private ProjectRecord(Builder builder) {
+        id = builder.id;
+        accountId = builder.accountId;
+        name = builder.name;
+        active = builder.active;
+    }
+
+    public static Builder projectRecordBuilder() {
+        return new Builder();
+    }
+
+    public static class Builder {
+        private long id;
+        private long accountId;
+        private String name;
+        private boolean active;
+
+        public ProjectRecord build() {
+            return new ProjectRecord(this);
+        }
+
+        public Builder id(long id) {
+            this.id = id;
+            return this;
+        }
+
+        public Builder accountId(long accountId) {
+            this.accountId = accountId;
+            return this;
+        }
+
+        public Builder name(String name) {
+            this.name = name;
+            return this;
+        }
+
+        public Builder active(boolean active) {
+            this.active = active;
+            return this;
+        }
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        ProjectRecord that = (ProjectRecord) o;
+
+        if (id != that.id) return false;
+        if (accountId != that.accountId) return false;
+        if (active != that.active) return false;
+        return name != null ? name.equals(that.name) : that.name == null;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = (int) (id ^ (id >>> 32));
+        result = 31 * result + (int) (accountId ^ (accountId >>> 32));
+        result = 31 * result + (name != null ? name.hashCode() : 0);
+        result = 31 * result + (active ? 1 : 0);
+        return result;
+    }
+
+    @Override
+    public String toString() {
+        return "ProjectRecord{" +
+            "id=" + id +
+            ", accountId=" + accountId +
+            ", name='" + name + '\'' +
+            ", active=" + active +
+            '}';
+    }
+}
+
diff --git a/components/projects/src/test/java/test/pivotal/pal/tracker/projects/ProjectControllerTest.java b/components/projects/src/test/java/test/pivotal/pal/tracker/projects/ProjectControllerTest.java
new file mode 100644
index 0000000..a956f2e
--- /dev/null
+++ b/components/projects/src/test/java/test/pivotal/pal/tracker/projects/ProjectControllerTest.java
@@ -0,0 +1,81 @@
+package test.pivotal.pal.tracker.projects;
+
+import io.pivotal.pal.tracker.projects.ProjectController;
+import io.pivotal.pal.tracker.projects.ProjectInfo;
+import io.pivotal.pal.tracker.projects.data.ProjectDataGateway;
+import io.pivotal.pal.tracker.projects.data.ProjectRecord;
+import org.junit.Test;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+
+import java.util.List;
+
+import static java.util.Arrays.asList;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyLong;
+import static org.mockito.Mockito.*;
+import static test.pivotal.pal.tracker.projects.TestBuilders.*;
+
+
+public class ProjectControllerTest {
+
+    private ProjectDataGateway gateway = mock(ProjectDataGateway.class);
+    private ProjectController controller = new ProjectController(gateway);
+
+    @Test
+    public void testCreate() {
+        ProjectRecord record = testProjectRecordBuilder().build();
+        doReturn(record).when(gateway).create(any());
+
+
+        ResponseEntity<ProjectInfo> result = controller.create(testProjectFormBuilder().build());
+
+
+        verify(gateway).create(testProjectFieldsBuilder().build());
+        assertThat(result.getStatusCode()).isEqualTo(HttpStatus.CREATED);
+        assertThat(result.getBody()).isEqualTo(testProjectInfoBuilder().build());
+    }
+
+    @Test
+    public void testList() {
+        List<ProjectRecord> records = asList(
+            testProjectRecordBuilder().id(12).build(),
+            testProjectRecordBuilder().id(13).build()
+        );
+        doReturn(records).when(gateway).findAllByAccountId(anyLong());
+
+
+        List<ProjectInfo> result = controller.list(23);
+
+
+        verify(gateway).findAllByAccountId(23L);
+        assertThat(result).containsExactlyInAnyOrder(
+            testProjectInfoBuilder().id(12).build(),
+            testProjectInfoBuilder().id(13).build()
+        );
+    }
+
+    @Test
+    public void testGet() {
+        ProjectRecord record = testProjectRecordBuilder().id(99).build();
+        doReturn(record).when(gateway).find(anyLong());
+
+
+        ProjectInfo result = controller.get(99);
+
+
+        verify(gateway).find(99);
+        assertThat(result).isEqualTo(testProjectInfoBuilder().id(99).build());
+    }
+
+    @Test
+    public void testGet_WithNull() {
+        doReturn(null).when(gateway).find(anyLong());
+
+        ProjectInfo result = controller.get(88);
+
+        verify(gateway).find(88);
+        assertThat(result).isNull();
+    }
+}
diff --git a/components/projects/src/test/java/test/pivotal/pal/tracker/projects/ProjectDataGatewayTest.java b/components/projects/src/test/java/test/pivotal/pal/tracker/projects/ProjectDataGatewayTest.java
new file mode 100644
index 0000000..a11e5d1
--- /dev/null
+++ b/components/projects/src/test/java/test/pivotal/pal/tracker/projects/ProjectDataGatewayTest.java
@@ -0,0 +1,79 @@
+package test.pivotal.pal.tracker.projects;
+
+import io.pivotal.pal.tracker.projects.data.ProjectDataGateway;
+import io.pivotal.pal.tracker.projects.data.ProjectFields;
+import io.pivotal.pal.tracker.projects.data.ProjectRecord;
+import io.pivotal.pal.tracker.testsupport.TestScenarioSupport;
+import org.junit.Before;
+import org.junit.Test;
+import org.springframework.jdbc.core.JdbcTemplate;
+
+import java.util.List;
+import java.util.Map;
+
+import static io.pivotal.pal.tracker.projects.data.ProjectFields.projectFieldsBuilder;
+import static io.pivotal.pal.tracker.projects.data.ProjectRecord.projectRecordBuilder;
+import static org.assertj.core.api.Assertions.assertThat;
+
+public class ProjectDataGatewayTest {
+
+    private TestScenarioSupport testScenarioSupport = new TestScenarioSupport("tracker_registration_test");
+    private JdbcTemplate template = testScenarioSupport.template;
+    private ProjectDataGateway gateway = new ProjectDataGateway(testScenarioSupport.dataSource);
+
+    @Before
+    public void setUp() throws Exception {
+        template.execute("DELETE FROM projects;");
+        template.execute("DELETE FROM accounts;");
+        template.execute("DELETE FROM users;");
+    }
+
+    @Test
+    public void testCreate() {
+        template.execute("insert into users (id, name) values (12, 'Jack')");
+        template.execute("insert into accounts (id, owner_id, name) values (1, 12, 'anAccount')");
+
+        ProjectFields fields = projectFieldsBuilder().accountId(1).name("aProject").build();
+        ProjectRecord created = gateway.create(fields);
+
+
+        assertThat(created.id).isNotNull();
+        assertThat(created.name).isEqualTo("aProject");
+        assertThat(created.accountId).isEqualTo(1L);
+
+        Map<String, Object> persisted = template.queryForMap("SELECT * FROM projects WHERE id = ?", created.id);
+
+        assertThat(persisted.get("name")).isEqualTo("aProject");
+        assertThat(persisted.get("account_id")).isEqualTo(1L);
+    }
+
+    @Test
+    public void testFindAllByAccountId() {
+        template.execute("insert into users (id, name) values (12, 'Jack')");
+        template.execute("insert into accounts (id, owner_id, name) values (1, 12, 'anAccount')");
+        template.execute("insert into projects (id, account_id, name) values (22, 1, 'aProject')");
+
+
+        List<ProjectRecord> result = gateway.findAllByAccountId(1L);
+
+
+        assertThat(result).containsExactlyInAnyOrder(
+            projectRecordBuilder().id(22L).accountId(1L).name("aProject").active(true).build()
+        );
+    }
+
+    @Test
+    public void testFind() {
+        template.execute("insert into users (id, name) values (12, 'Jack')");
+        template.execute("insert into accounts (id, owner_id, name) values (1, 12, 'anAccount')");
+        template.execute("insert into projects (id, account_id, name, active) values (22, 1, 'aProject', true)");
+
+
+        ProjectRecord foundRecord = gateway.find(22L);
+
+
+        assertThat(foundRecord).isEqualTo(
+            projectRecordBuilder().id(22L).accountId(1L).name("aProject").active(true).build()
+        );
+    }
+}
diff --git a/components/projects/src/test/java/test/pivotal/pal/tracker/projects/TestBuilders.java b/components/projects/src/test/java/test/pivotal/pal/tracker/projects/TestBuilders.java
new file mode 100644
index 0000000..00dda82
--- /dev/null
+++ b/components/projects/src/test/java/test/pivotal/pal/tracker/projects/TestBuilders.java
@@ -0,0 +1,45 @@
+package test.pivotal.pal.tracker.projects;
+
+import io.pivotal.pal.tracker.projects.ProjectForm;
+import io.pivotal.pal.tracker.projects.ProjectInfo;
+import io.pivotal.pal.tracker.projects.data.ProjectFields;
+import io.pivotal.pal.tracker.projects.data.ProjectRecord;
+
+import static io.pivotal.pal.tracker.projects.ProjectForm.projectFormBuilder;
+import static io.pivotal.pal.tracker.projects.ProjectInfo.projectInfoBuilder;
+import static io.pivotal.pal.tracker.projects.data.ProjectFields.projectFieldsBuilder;
+import static io.pivotal.pal.tracker.projects.data.ProjectRecord.projectRecordBuilder;
+
+public class TestBuilders {
+
+    public static ProjectRecord.Builder testProjectRecordBuilder() {
+        return projectRecordBuilder()
+            .id(9L)
+            .accountId(23L)
+            .name("MyInfo")
+            .active(true);
+    }
+
+    public static ProjectInfo.Builder testProjectInfoBuilder() {
+        return projectInfoBuilder()
+            .id(9L)
+            .accountId(23L)
+            .name("MyInfo")
+            .active(true)
+            .info("project info");
+    }
+
+    public static ProjectFields.Builder testProjectFieldsBuilder() {
+        return projectFieldsBuilder()
+            .accountId(23L)
+            .name("MyInfo")
+            .active(true);
+    }
+
+    public static ProjectForm.Builder testProjectFormBuilder() {
+        return projectFormBuilder()
+            .accountId(23L)
+            .name("MyInfo")
+            .active(true);
+    }
+}
diff --git a/components/rest-support/build.gradle b/components/rest-support/build.gradle
new file mode 100644
index 0000000..fd70427
--- /dev/null
+++ b/components/rest-support/build.gradle
@@ -0,0 +1,3 @@
+dependencies {
+    compile "org.springframework:spring-web:$springVersion"
+}
diff --git a/components/rest-support/src/main/java/io/pivotal/pal/tracker/restsupport/RestConfig.java b/components/rest-support/src/main/java/io/pivotal/pal/tracker/restsupport/RestConfig.java
new file mode 100644
index 0000000..3120f4c
--- /dev/null
+++ b/components/rest-support/src/main/java/io/pivotal/pal/tracker/restsupport/RestConfig.java
@@ -0,0 +1,25 @@
+package io.pivotal.pal.tracker.restsupport;
+
+import com.fasterxml.jackson.databind.DeserializationFeature;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.web.client.RestOperations;
+import org.springframework.web.client.RestTemplate;
+
+
+@Configuration
+public class RestConfig {
+
+    @Bean
+    public RestOperations restOperations() {
+        return new RestTemplate();
+    }
+
+    @Bean
+    public ObjectMapper objectMapper() {
+        ObjectMapper mapper = new ObjectMapper();
+        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
+        return mapper;
+    }
+}
diff --git a/components/rest-support/src/main/java/io/pivotal/pal/tracker/restsupport/SpringDefaultController.java b/components/rest-support/src/main/java/io/pivotal/pal/tracker/restsupport/SpringDefaultController.java
new file mode 100644
index 0000000..cc6889b
--- /dev/null
+++ b/components/rest-support/src/main/java/io/pivotal/pal/tracker/restsupport/SpringDefaultController.java
@@ -0,0 +1,13 @@
+package io.pivotal.pal.tracker.restsupport;
+
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+@RestController
+public class SpringDefaultController {
+
+    @GetMapping("/")
+    public String defaultRoute() {
+        return "Noop!";
+    }
+}
diff --git a/components/test-support/build.gradle b/components/test-support/build.gradle
new file mode 100644
index 0000000..0514f1f
--- /dev/null
+++ b/components/test-support/build.gradle
@@ -0,0 +1,6 @@
+dependencies {
+    compile project(":components:rest-support")
+    compile "org.springframework:spring-jdbc:$springVersion"
+    compile "mysql:mysql-connector-java:$mysqlVersion"
+    compile "junit:junit:4.12"
+}
diff --git a/components/test-support/src/main/java/io/pivotal/pal/tracker/testsupport/TestDataSourceFactory.java b/components/test-support/src/main/java/io/pivotal/pal/tracker/testsupport/TestDataSourceFactory.java
new file mode 100644
index 0000000..cd99c55
--- /dev/null
+++ b/components/test-support/src/main/java/io/pivotal/pal/tracker/testsupport/TestDataSourceFactory.java
@@ -0,0 +1,18 @@
+package io.pivotal.pal.tracker.testsupport;
+
+import com.mysql.cj.jdbc.MysqlDataSource;
+
+import javax.sql.DataSource;
+
+
+public class TestDataSourceFactory {
+
+    public static DataSource create(String name) {
+        MysqlDataSource dataSource = new MysqlDataSource();
+
+        dataSource.setUrl("jdbc:mysql://localhost:3306/" + name + "?useSSL=false&useTimezone=true&serverTimezone=UTC&useLegacyDatetimeCode=false");
+        dataSource.setUser("tracker");
+
+        return dataSource;
+    }
+}
diff --git a/components/test-support/src/main/java/io/pivotal/pal/tracker/testsupport/TestScenarioSupport.java b/components/test-support/src/main/java/io/pivotal/pal/tracker/testsupport/TestScenarioSupport.java
new file mode 100644
index 0000000..fcb840f
--- /dev/null
+++ b/components/test-support/src/main/java/io/pivotal/pal/tracker/testsupport/TestScenarioSupport.java
@@ -0,0 +1,33 @@
+package io.pivotal.pal.tracker.testsupport;
+
+import org.springframework.jdbc.core.JdbcTemplate;
+
+import javax.sql.DataSource;
+import java.util.TimeZone;
+
+public class TestScenarioSupport {
+
+    public final JdbcTemplate template;
+    public final DataSource dataSource;
+
+    public TestScenarioSupport(String dbName) {
+        dataSource = TestDataSourceFactory.create(dbName);
+        template = new JdbcTemplate(dataSource);
+        TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
+    }
+
+    public static void clearAllDatabases() {
+        clearTables("tracker_allocations_test", "allocations");
+        clearTables("tracker_backlog_test", "stories");
+        clearTables("tracker_registration_test", "projects", "accounts", "users");
+        clearTables("tracker_timesheets_test", "time_entries");
+    }
+
+    private static void clearTables(String dbName, String... tableNames) {
+        JdbcTemplate template = new JdbcTemplate(TestDataSourceFactory.create(dbName));
+
+        for (String tableName : tableNames) {
+            template.execute("delete from " + tableName);
+        }
+    }
+}
diff --git a/components/timesheets/build.gradle b/components/timesheets/build.gradle
new file mode 100644
index 0000000..4526bf7
--- /dev/null
+++ b/components/timesheets/build.gradle
@@ -0,0 +1,6 @@
+dependencies {
+    compile project(":components:rest-support")
+    compile "org.springframework:spring-jdbc:$springVersion"
+
+    testCompile project(":components:test-support")
+}
diff --git a/components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/ProjectClient.java b/components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/ProjectClient.java
new file mode 100644
index 0000000..bdbdb5b
--- /dev/null
+++ b/components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/ProjectClient.java
@@ -0,0 +1,18 @@
+package io.pivotal.pal.tracker.timesheets;
+
+import org.springframework.web.client.RestOperations;
+
+public class ProjectClient {
+
+    private final RestOperations restOperations;
+    private final String endpoint;
+
+    public ProjectClient(RestOperations restOperations, String registrationServerEndpoint) {
+        this.restOperations = restOperations;
+        this.endpoint = registrationServerEndpoint;
+    }
+
+    public ProjectInfo getProject(long projectId) {
+        return restOperations.getForObject(endpoint + "/projects/" + projectId, ProjectInfo.class);
+    }
+}
diff --git a/components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/ProjectInfo.java b/components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/ProjectInfo.java
new file mode 100644
index 0000000..0c08b3f
--- /dev/null
+++ b/components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/ProjectInfo.java
@@ -0,0 +1,37 @@
+package io.pivotal.pal.tracker.timesheets;
+
+public class ProjectInfo {
+
+    public final boolean active;
+
+    private ProjectInfo() {
+        this(false);
+    }
+
+    public ProjectInfo(boolean active) {
+        this.active = active;
+    }
+
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        ProjectInfo that = (ProjectInfo) o;
+
+        return active == that.active;
+    }
+
+    @Override
+    public int hashCode() {
+        return (active ? 1 : 0);
+    }
+
+    @Override
+    public String toString() {
+        return "ProjectInfo{" +
+            "active=" + active +
+            '}';
+    }
+}
diff --git a/components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/TimeEntryController.java b/components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/TimeEntryController.java
new file mode 100644
index 0000000..a69f6a0
--- /dev/null
+++ b/components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/TimeEntryController.java
@@ -0,0 +1,71 @@
+package io.pivotal.pal.tracker.timesheets;
+
+import io.pivotal.pal.tracker.timesheets.data.TimeEntryDataGateway;
+import io.pivotal.pal.tracker.timesheets.data.TimeEntryFields;
+import io.pivotal.pal.tracker.timesheets.data.TimeEntryRecord;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import java.time.LocalDate;
+import java.util.List;
+
+import static io.pivotal.pal.tracker.timesheets.TimeEntryInfo.timeEntryInfoBuilder;
+import static io.pivotal.pal.tracker.timesheets.data.TimeEntryFields.timeEntryFieldsBuilder;
+import static java.util.stream.Collectors.toList;
+
+@RestController
+@RequestMapping("/time-entries")
+public class TimeEntryController {
+
+    private final TimeEntryDataGateway gateway;
+    private final ProjectClient client;
+
+    public TimeEntryController(TimeEntryDataGateway gateway, ProjectClient client) {
+        this.gateway = gateway;
+        this.client = client;
+    }
+
+
+    @PostMapping
+    public ResponseEntity<TimeEntryInfo> create(@RequestBody TimeEntryForm form) {
+        if (projectIsActive(form.projectId)) {
+            TimeEntryRecord record = gateway.create(mapToFields(form));
+            return new ResponseEntity<>(present(record), HttpStatus.CREATED);
+        }
+        return new ResponseEntity<>(HttpStatus.SERVICE_UNAVAILABLE);
+    }
+
+    @GetMapping
+    public List<TimeEntryInfo> list(@RequestParam long userId) {
+        return gateway.findAllByUserId(userId).stream()
+            .map(this::present)
+            .collect(toList());
+    }
+
+
+    private TimeEntryInfo present(TimeEntryRecord record) {
+        return timeEntryInfoBuilder()
+            .id(record.id)
+            .projectId(record.projectId)
+            .userId(record.userId)
+            .date(record.date.toString())
+            .hours(record.hours)
+            .info("time entry info")
+            .build();
+    }
+
+    private TimeEntryFields mapToFields(TimeEntryForm form) {
+        return timeEntryFieldsBuilder()
+            .projectId(form.projectId)
+            .userId(form.userId)
+            .date(LocalDate.parse(form.date))
+            .hours(form.hours)
+            .build();
+    }
+
+    private boolean projectIsActive(long projectId) {
+        ProjectInfo project = client.getProject(projectId);
+        return project != null && project.active;
+    }
+}
diff --git a/components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/TimeEntryForm.java b/components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/TimeEntryForm.java
new file mode 100644
index 0000000..96006cd
--- /dev/null
+++ b/components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/TimeEntryForm.java
@@ -0,0 +1,92 @@
+package io.pivotal.pal.tracker.timesheets;
+
+public class TimeEntryForm {
+    public final long projectId;
+    public final long userId;
+    public final String date;
+    public final int hours;
+
+    private TimeEntryForm() { // for jackson
+        this(timeEntryFormBuilder());
+    }
+
+    private TimeEntryForm(Builder builder) {
+        projectId = builder.projectId;
+        userId = builder.userId;
+        date = builder.date;
+        hours = builder.hours;
+    }
+
+    public static Builder timeEntryFormBuilder() {
+        return new Builder();
+    }
+
+    public static class Builder {
+        private long id;
+        private long projectId;
+        private long userId;
+        private String date;
+        private int hours;
+
+        public Builder id(long id) {
+            this.id = id;
+            return this;
+        }
+
+        public Builder projectId(long projectId) {
+            this.projectId = projectId;
+            return this;
+        }
+
+        public Builder userId(long userId) {
+            this.userId = userId;
+            return this;
+        }
+
+        public Builder date(String date) {
+            this.date = date;
+            return this;
+        }
+
+        public Builder hours(Integer hours) {
+            this.hours = hours;
+            return this;
+        }
+
+        public TimeEntryForm build() {
+            return new TimeEntryForm(this);
+        }
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        TimeEntryForm that = (TimeEntryForm) o;
+
+        if (projectId != that.projectId) return false;
+        if (userId != that.userId) return false;
+        if (hours != that.hours) return false;
+        return date != null ? date.equals(that.date) : that.date == null;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = (int) (projectId ^ (projectId >>> 32));
+        result = 31 * result + (int) (userId ^ (userId >>> 32));
+        result = 31 * result + (date != null ? date.hashCode() : 0);
+        result = 31 * result + hours;
+        return result;
+    }
+
+    @Override
+    public String toString() {
+        return "TimeEntryForm{" +
+            "projectId=" + projectId +
+            ", userId=" + userId +
+            ", date='" + date + '\'' +
+            ", hours=" + hours +
+            '}';
+    }
+}
diff --git a/components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/TimeEntryInfo.java b/components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/TimeEntryInfo.java
new file mode 100644
index 0000000..df7b306
--- /dev/null
+++ b/components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/TimeEntryInfo.java
@@ -0,0 +1,109 @@
+package io.pivotal.pal.tracker.timesheets;
+
+public class TimeEntryInfo {
+    public final long id;
+    public final long projectId;
+    public final long userId;
+    public final String date;
+    public final int hours;
+    public final String info;
+
+    public TimeEntryInfo() { // for jackson
+        this(timeEntryInfoBuilder());
+    }
+
+    private TimeEntryInfo(Builder builder) {
+        id = builder.id;
+        projectId = builder.projectId;
+        userId = builder.userId;
+        date = builder.date;
+        hours = builder.hours;
+        info = builder.info;
+    }
+
+    public static Builder timeEntryInfoBuilder() {
+        return new Builder();
+    }
+
+    public static class Builder {
+        private long id;
+        private long projectId;
+        private long userId;
+        private String date;
+        private int hours;
+        private String info;
+
+        public Builder id(long id) {
+            this.id = id;
+            return this;
+        }
+
+        public Builder projectId(long projectId) {
+            this.projectId = projectId;
+            return this;
+        }
+
+        public Builder userId(long userId) {
+            this.userId = userId;
+            return this;
+        }
+
+        public Builder date(String date) {
+            this.date = date;
+            return this;
+        }
+
+        public Builder hours(int hours) {
+            this.hours = hours;
+            return this;
+        }
+
+        public Builder info(String info) {
+            this.info = info;
+            return this;
+        }
+
+        public TimeEntryInfo build() {
+            return new TimeEntryInfo(this);
+        }
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        TimeEntryInfo that = (TimeEntryInfo) o;
+
+        if (id != that.id) return false;
+        if (projectId != that.projectId) return false;
+        if (userId != that.userId) return false;
+        if (hours != that.hours) return false;
+        if (date != null ? !date.equals(that.date) : that.date != null)
+            return false;
+        return info != null ? info.equals(that.info) : that.info == null;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = (int) (id ^ (id >>> 32));
+        result = 31 * result + (int) (projectId ^ (projectId >>> 32));
+        result = 31 * result + (int) (userId ^ (userId >>> 32));
+        result = 31 * result + (date != null ? date.hashCode() : 0);
+        result = 31 * result + hours;
+        result = 31 * result + (info != null ? info.hashCode() : 0);
+        return result;
+    }
+
+    @Override
+    public String toString() {
+        return "TimeEntryInfo{" +
+            "id=" + id +
+            ", projectId=" + projectId +
+            ", userId=" + userId +
+            ", date=" + date +
+            ", hours=" + hours +
+            ", info='" + info + '\'' +
+            '}';
+    }
+}
diff --git a/components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/data/TimeEntryDataGateway.java b/components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/data/TimeEntryDataGateway.java
new file mode 100644
index 0000000..2e569d2
--- /dev/null
+++ b/components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/data/TimeEntryDataGateway.java
@@ -0,0 +1,66 @@
+package io.pivotal.pal.tracker.timesheets.data;
+
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.core.RowMapper;
+import org.springframework.jdbc.support.GeneratedKeyHolder;
+import org.springframework.jdbc.support.KeyHolder;
+import org.springframework.stereotype.Repository;
+
+import javax.sql.DataSource;
+import java.sql.Date;
+import java.sql.PreparedStatement;
+import java.util.List;
+
+import static io.pivotal.pal.tracker.timesheets.data.TimeEntryRecord.timeEntryRecordBuilder;
+import static java.sql.Statement.RETURN_GENERATED_KEYS;
+
+@Repository
+public class TimeEntryDataGateway {
+
+    private JdbcTemplate jdbcTemplate;
+
+    public TimeEntryDataGateway(DataSource dataSource) {
+        this.jdbcTemplate = new JdbcTemplate(dataSource);
+    }
+
+    public TimeEntryRecord create(TimeEntryFields fields) {
+        KeyHolder keyHolder = new GeneratedKeyHolder();
+
+        jdbcTemplate.update(
+            connection -> {
+                PreparedStatement ps = connection.prepareStatement(
+                    "insert into time_entries (project_id, user_id, date, hours) values (?, ?, ?, ?)", RETURN_GENERATED_KEYS);
+                ps.setLong(1, fields.projectId);
+                ps.setLong(2, fields.userId);
+                ps.setDate(3, Date.valueOf(fields.date));
+                ps.setInt(4, fields.hours);
+                return ps;
+            }, keyHolder);
+
+        return find(keyHolder.getKey().longValue());
+    }
+
+    public List<TimeEntryRecord> findAllByUserId(long userId) {
+        return jdbcTemplate.query(
+            "select id, project_id, user_id, date, hours from time_entries where user_id = ?",
+            rowMapper, userId
+        );
+    }
+
+
+    private TimeEntryRecord find(long id) {
+        return jdbcTemplate.queryForObject(
+            "select id, project_id, user_id, date, hours from time_entries where id = ?",
+            rowMapper, id
+        );
+    }
+
+    private RowMapper<TimeEntryRecord> rowMapper = (rs, num) ->
+        timeEntryRecordBuilder()
+            .id(rs.getLong("id"))
+            .projectId(rs.getLong("project_id"))
+            .userId(rs.getLong("user_id"))
+            .date(rs.getDate("date").toLocalDate())
+            .hours(rs.getInt("hours"))
+            .build();
+}
diff --git a/components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/data/TimeEntryFields.java b/components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/data/TimeEntryFields.java
new file mode 100644
index 0000000..fe698a8
--- /dev/null
+++ b/components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/data/TimeEntryFields.java
@@ -0,0 +1,86 @@
+package io.pivotal.pal.tracker.timesheets.data;
+
+import java.time.LocalDate;
+
+public class TimeEntryFields {
+
+    public final long projectId;
+    public final long userId;
+    public final LocalDate date;
+    public final int hours;
+
+    private TimeEntryFields(Builder builder) {
+        projectId = builder.projectId;
+        userId = builder.userId;
+        date = builder.date;
+        hours = builder.hours;
+    }
+
+    public static Builder timeEntryFieldsBuilder() {
+        return new Builder();
+    }
+
+    public static class Builder {
+
+        private long projectId;
+        private long userId;
+        private LocalDate date;
+        private int hours;
+
+        public TimeEntryFields build() {
+            return new TimeEntryFields(this);
+        }
+
+        public Builder projectId(long projectId) {
+            this.projectId = projectId;
+            return this;
+        }
+
+        public Builder userId(long userId) {
+            this.userId = userId;
+            return this;
+        }
+
+        public Builder date(LocalDate date) {
+            this.date = date;
+            return this;
+        }
+
+        public Builder hours(int hours) {
+            this.hours = hours;
+            return this;
+        }
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        TimeEntryFields that = (TimeEntryFields) o;
+
+        if (projectId != that.projectId) return false;
+        if (userId != that.userId) return false;
+        if (hours != that.hours) return false;
+        return date != null ? date.equals(that.date) : that.date == null;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = (int) (projectId ^ (projectId >>> 32));
+        result = 31 * result + (int) (userId ^ (userId >>> 32));
+        result = 31 * result + (date != null ? date.hashCode() : 0);
+        result = 31 * result + hours;
+        return result;
+    }
+
+    @Override
+    public String toString() {
+        return "TimeEntryFields{" +
+            "projectId=" + projectId +
+            ", userId=" + userId +
+            ", date=" + date +
+            ", hours=" + hours +
+            '}';
+    }
+}
diff --git a/components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/data/TimeEntryRecord.java b/components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/data/TimeEntryRecord.java
new file mode 100644
index 0000000..4c81890
--- /dev/null
+++ b/components/timesheets/src/main/java/io/pivotal/pal/tracker/timesheets/data/TimeEntryRecord.java
@@ -0,0 +1,97 @@
+package io.pivotal.pal.tracker.timesheets.data;
+
+import java.time.LocalDate;
+
+public class TimeEntryRecord {
+
+    public final long id;
+    public final long projectId;
+    public final long userId;
+    public final LocalDate date;
+    public final int hours;
+
+    private TimeEntryRecord(Builder builder) {
+        id = builder.id;
+        projectId = builder.projectId;
+        userId = builder.userId;
+        date = builder.date;
+        hours = builder.hours;
+    }
+
+    public static Builder timeEntryRecordBuilder() {
+        return new Builder();
+    }
+
+    public static class Builder {
+
+        private long id;
+        private long projectId;
+        private long userId;
+        private LocalDate date;
+        private int hours;
+
+        public TimeEntryRecord build() {
+            return new TimeEntryRecord(this);
+        }
+
+        public Builder id(long id) {
+            this.id = id;
+            return this;
+        }
+
+        public Builder projectId(long projectId) {
+            this.projectId = projectId;
+            return this;
+        }
+
+        public Builder userId(long userId) {
+            this.userId = userId;
+            return this;
+        }
+
+        public Builder date(LocalDate date) {
+            this.date = date;
+            return this;
+        }
+
+        public Builder hours(int hours) {
+            this.hours = hours;
+            return this;
+        }
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        TimeEntryRecord that = (TimeEntryRecord) o;
+
+        if (id != that.id) return false;
+        if (projectId != that.projectId) return false;
+        if (userId != that.userId) return false;
+        if (hours != that.hours) return false;
+        return date != null ? date.equals(that.date) : that.date == null;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = (int) (id ^ (id >>> 32));
+        result = 31 * result + (int) (projectId ^ (projectId >>> 32));
+        result = 31 * result + (int) (userId ^ (userId >>> 32));
+        result = 31 * result + (date != null ? date.hashCode() : 0);
+        result = 31 * result + hours;
+        return result;
+    }
+
+    @Override
+    public String toString() {
+        return "TimeEntryRecord{" +
+            "id=" + id +
+            ", projectId=" + projectId +
+            ", userId=" + userId +
+            ", date=" + date +
+            ", hours=" + hours +
+            '}';
+    }
+}
diff --git a/components/timesheets/src/test/java/test/pivotal/pal/tracker/timesheets/TestBuilders.java b/components/timesheets/src/test/java/test/pivotal/pal/tracker/timesheets/TestBuilders.java
new file mode 100644
index 0000000..aaf395c
--- /dev/null
+++ b/components/timesheets/src/test/java/test/pivotal/pal/tracker/timesheets/TestBuilders.java
@@ -0,0 +1,51 @@
+package test.pivotal.pal.tracker.timesheets;
+
+import io.pivotal.pal.tracker.timesheets.TimeEntryForm;
+import io.pivotal.pal.tracker.timesheets.TimeEntryInfo;
+import io.pivotal.pal.tracker.timesheets.data.TimeEntryFields;
+import io.pivotal.pal.tracker.timesheets.data.TimeEntryRecord;
+
+import java.time.LocalDate;
+
+import static io.pivotal.pal.tracker.timesheets.TimeEntryForm.timeEntryFormBuilder;
+import static io.pivotal.pal.tracker.timesheets.TimeEntryInfo.timeEntryInfoBuilder;
+import static io.pivotal.pal.tracker.timesheets.data.TimeEntryFields.timeEntryFieldsBuilder;
+import static io.pivotal.pal.tracker.timesheets.data.TimeEntryRecord.timeEntryRecordBuilder;
+
+public class TestBuilders {
+
+    public static TimeEntryRecord.Builder testTimeEntryRecordBuilder() {
+        return timeEntryRecordBuilder()
+            .id(11)
+            .projectId(12)
+            .userId(13)
+            .date(LocalDate.parse("2017-09-19"))
+            .hours(20);
+    }
+
+    public static TimeEntryFields.Builder testTimeEntryFieldsBuilder() {
+        return timeEntryFieldsBuilder()
+            .projectId(12)
+            .userId(13)
+            .date(LocalDate.parse("2017-09-19"))
+            .hours(20);
+    }
+
+    public static TimeEntryForm.Builder testTimeEntryFormBuilder() {
+        return timeEntryFormBuilder()
+            .projectId(12)
+            .userId(13)
+            .date("2017-09-19")
+            .hours(20);
+    }
+
+    public static TimeEntryInfo.Builder testTimeEntryInfoBuilder() {
+        return timeEntryInfoBuilder()
+            .id(11)
+            .projectId(12)
+            .userId(13)
+            .date("2017-09-19")
+            .hours(20)
+            .info("time entry info");
+    }
+}
diff --git a/components/timesheets/src/test/java/test/pivotal/pal/tracker/timesheets/TimeEntryControllerTest.java b/components/timesheets/src/test/java/test/pivotal/pal/tracker/timesheets/TimeEntryControllerTest.java
new file mode 100644
index 0000000..ddc70c5
--- /dev/null
+++ b/components/timesheets/src/test/java/test/pivotal/pal/tracker/timesheets/TimeEntryControllerTest.java
@@ -0,0 +1,78 @@
+package test.pivotal.pal.tracker.timesheets;
+
+import io.pivotal.pal.tracker.timesheets.*;
+import io.pivotal.pal.tracker.timesheets.data.TimeEntryDataGateway;
+import io.pivotal.pal.tracker.timesheets.data.TimeEntryFields;
+import io.pivotal.pal.tracker.timesheets.data.TimeEntryRecord;
+import org.junit.Test;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+
+import java.util.List;
+
+import static java.util.Arrays.asList;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.mockito.ArgumentMatchers.anyLong;
+import static org.mockito.Mockito.*;
+import static test.pivotal.pal.tracker.timesheets.TestBuilders.*;
+
+
+public class TimeEntryControllerTest {
+
+    private TimeEntryDataGateway gateway = mock(TimeEntryDataGateway.class);
+    private ProjectClient client = mock(ProjectClient.class);
+    private TimeEntryController controller = new TimeEntryController(gateway, client);
+
+
+    @Test
+    public void testCreate() {
+        TimeEntryRecord record = testTimeEntryRecordBuilder().projectId(12).build();
+        TimeEntryFields fields = testTimeEntryFieldsBuilder().projectId(12).build();
+        TimeEntryForm form = testTimeEntryFormBuilder().projectId(12).build();
+
+        doReturn(record).when(gateway).create(fields);
+        doReturn(new ProjectInfo(true)).when(client).getProject(anyLong());
+
+
+        ResponseEntity<TimeEntryInfo> result = controller.create(form);
+
+
+        verify(client).getProject(12L);
+        assertThat(result.getStatusCode()).isEqualTo(HttpStatus.CREATED);
+        assertThat(result.getBody()).isEqualTo(testTimeEntryInfoBuilder().projectId(12).build());
+    }
+
+    @Test
+    public void testCreate_WhenFailed() {
+        doReturn(new ProjectInfo(false)).when(client).getProject(anyLong());
+
+
+        ResponseEntity<TimeEntryInfo> result = controller.create(testTimeEntryFormBuilder().projectId(12).build());
+
+
+        assertThat(result.getStatusCode()).isEqualTo(HttpStatus.SERVICE_UNAVAILABLE);
+    }
+
+    @Test
+    public void testList() {
+        List<TimeEntryRecord> records = asList(
+            testTimeEntryRecordBuilder().id(10).build(),
+            testTimeEntryRecordBuilder().id(11).build(),
+            testTimeEntryRecordBuilder().id(12).build()
+        );
+        doReturn(records).when(gateway).findAllByUserId(anyLong());
+        int userId = 210;
+
+
+        List<TimeEntryInfo> result = controller.list(userId);
+
+
+        verify(gateway).findAllByUserId(userId);
+
+        assertThat(result).containsExactlyInAnyOrder(
+            testTimeEntryInfoBuilder().id(10).build(),
+            testTimeEntryInfoBuilder().id(11).build(),
+            testTimeEntryInfoBuilder().id(12).build()
+        );
+    }
+}
diff --git a/components/timesheets/src/test/java/test/pivotal/pal/tracker/timesheets/TimeEntryDataGatewayTest.java b/components/timesheets/src/test/java/test/pivotal/pal/tracker/timesheets/TimeEntryDataGatewayTest.java
new file mode 100644
index 0000000..bea2719
--- /dev/null
+++ b/components/timesheets/src/test/java/test/pivotal/pal/tracker/timesheets/TimeEntryDataGatewayTest.java
@@ -0,0 +1,75 @@
+package test.pivotal.pal.tracker.timesheets;
+
+import io.pivotal.pal.tracker.testsupport.TestScenarioSupport;
+import io.pivotal.pal.tracker.timesheets.data.TimeEntryDataGateway;
+import io.pivotal.pal.tracker.timesheets.data.TimeEntryFields;
+import io.pivotal.pal.tracker.timesheets.data.TimeEntryRecord;
+import org.junit.Before;
+import org.junit.Test;
+import org.springframework.jdbc.core.JdbcTemplate;
+
+import java.sql.Timestamp;
+import java.time.LocalDate;
+import java.util.List;
+import java.util.Map;
+
+import static io.pivotal.pal.tracker.timesheets.data.TimeEntryFields.timeEntryFieldsBuilder;
+import static io.pivotal.pal.tracker.timesheets.data.TimeEntryRecord.timeEntryRecordBuilder;
+import static org.assertj.core.api.Assertions.assertThat;
+
+public class TimeEntryDataGatewayTest {
+
+    private TestScenarioSupport testScenarioSupport = new TestScenarioSupport("tracker_timesheets_test");
+    private JdbcTemplate template = testScenarioSupport.template;
+    private TimeEntryDataGateway gateway = new TimeEntryDataGateway(testScenarioSupport.dataSource);
+
+
+    @Before
+    public void setUp() throws Exception {
+        template.execute("DELETE FROM time_entries;");
+    }
+
+    @Test
+    public void testCreate() {
+        TimeEntryFields fields = timeEntryFieldsBuilder()
+            .projectId(22L)
+            .userId(12L)
+            .date(LocalDate.parse("2016-02-28"))
+            .hours(8)
+            .build();
+        TimeEntryRecord created = gateway.create(fields);
+
+
+        assertThat(created.id).isNotNull();
+        assertThat(created.projectId).isEqualTo(22L);
+        assertThat(created.userId).isEqualTo(12L);
+        assertThat(created.date).isEqualTo(LocalDate.parse("2016-02-28"));
+        assertThat(created.hours).isEqualTo(8);
+
+        Map<String, Object> persisted = template.queryForMap("SELECT * FROM time_entries WHERE id = ?", created.id);
+
+        assertThat(persisted.get("project_id")).isEqualTo(22L);
+        assertThat(persisted.get("user_id")).isEqualTo(12L);
+        assertThat(persisted.get("date")).isEqualTo(Timestamp.valueOf("2016-02-28 00:00:00"));
+        assertThat(persisted.get("hours")).isEqualTo(8);
+    }
+
+    @Test
+    public void testFindAllByUserId() {
+        template.execute("insert into time_entries (id, project_id, user_id, date, hours) values (2346, 22, 12, '2016-01-13', 8)");
+
+
+        List<TimeEntryRecord> result = gateway.findAllByUserId(12L);
+
+
+        assertThat(result).containsExactlyInAnyOrder(
+            timeEntryRecordBuilder()
+                .id(2346L)
+                .projectId(22L)
+                .userId(12L)
+                .date(LocalDate.parse("2016-01-13"))
+                .hours(8)
+                .build()
+        );
+    }
+}
diff --git a/components/users/build.gradle b/components/users/build.gradle
new file mode 100644
index 0000000..faf294b
--- /dev/null
+++ b/components/users/build.gradle
@@ -0,0 +1,5 @@
+dependencies {
+    compile "org.springframework:spring-jdbc:$springVersion"
+    compile project(":components:rest-support")
+    testCompile project(":components:test-support")
+}
diff --git a/components/users/src/main/java/io/pivotal/pal/tracker/users/UserController.java b/components/users/src/main/java/io/pivotal/pal/tracker/users/UserController.java
new file mode 100644
index 0000000..8e92af7
--- /dev/null
+++ b/components/users/src/main/java/io/pivotal/pal/tracker/users/UserController.java
@@ -0,0 +1,31 @@
+package io.pivotal.pal.tracker.users;
+
+import io.pivotal.pal.tracker.users.data.UserDataGateway;
+import io.pivotal.pal.tracker.users.data.UserRecord;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+@RestController
+@RequestMapping("/users")
+public class UserController {
+
+    private final UserDataGateway gateway;
+
+    public UserController(UserDataGateway gateway) {
+        this.gateway = gateway;
+    }
+
+
+    @GetMapping("/{userId}")
+    public UserInfo show(@PathVariable long userId) {
+        UserRecord record = gateway.find(userId);
+
+        if (record == null) {
+            return null;
+        }
+
+        return new UserInfo(record.id, record.name, "user info");
+    }
+}
diff --git a/components/users/src/main/java/io/pivotal/pal/tracker/users/UserInfo.java b/components/users/src/main/java/io/pivotal/pal/tracker/users/UserInfo.java
new file mode 100644
index 0000000..a1b1675
--- /dev/null
+++ b/components/users/src/main/java/io/pivotal/pal/tracker/users/UserInfo.java
@@ -0,0 +1,49 @@
+package io.pivotal.pal.tracker.users;
+
+public class UserInfo {
+
+    public final long id;
+    public final String name;
+    public final String info;
+
+    public UserInfo(long id, String name, String info) {
+        this.id = id;
+        this.name = name;
+        this.info = info;
+    }
+
+    private UserInfo() {
+        this(0, null, null);
+    }
+
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        UserInfo userInfo = (UserInfo) o;
+
+        if (id != userInfo.id) return false;
+        if (name != null ? !name.equals(userInfo.name) : userInfo.name != null)
+            return false;
+        return info != null ? info.equals(userInfo.info) : userInfo.info == null;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = (int) (id ^ (id >>> 32));
+        result = 31 * result + (name != null ? name.hashCode() : 0);
+        result = 31 * result + (info != null ? info.hashCode() : 0);
+        return result;
+    }
+
+    @Override
+    public String toString() {
+        return "UserInfo{" +
+            "id=" + id +
+            ", name='" + name + '\'' +
+            ", info='" + info + '\'' +
+            '}';
+    }
+}
diff --git a/components/users/src/main/java/io/pivotal/pal/tracker/users/data/UserDataGateway.java b/components/users/src/main/java/io/pivotal/pal/tracker/users/data/UserDataGateway.java
new file mode 100644
index 0000000..ccd7bac
--- /dev/null
+++ b/components/users/src/main/java/io/pivotal/pal/tracker/users/data/UserDataGateway.java
@@ -0,0 +1,50 @@
+package io.pivotal.pal.tracker.users.data;
+
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.core.RowMapper;
+import org.springframework.jdbc.support.GeneratedKeyHolder;
+import org.springframework.jdbc.support.KeyHolder;
+import org.springframework.stereotype.Repository;
+
+import javax.sql.DataSource;
+import java.sql.PreparedStatement;
+import java.util.List;
+
+import static java.sql.Statement.RETURN_GENERATED_KEYS;
+
+@Repository
+public class UserDataGateway {
+
+    private final JdbcTemplate jdbcTemplate;
+
+    public UserDataGateway(DataSource dataSource) {
+        this.jdbcTemplate = new JdbcTemplate(dataSource);
+    }
+
+
+    public UserRecord create(String name) {
+        KeyHolder keyholder = new GeneratedKeyHolder();
+
+        jdbcTemplate.update(connection -> {
+            PreparedStatement ps = connection.prepareStatement("insert into users (name) values (?)", RETURN_GENERATED_KEYS);
+            ps.setString(1, name);
+            return ps;
+        }, keyholder);
+
+        return find(keyholder.getKey().longValue());
+    }
+
+    public UserRecord find(long id) {
+        List<UserRecord> list = jdbcTemplate.query("select id, name from users where id = ? limit 1", rowMapper, id);
+
+        if (list.isEmpty()) {
+            return null;
+        }
+
+        return list.get(0);
+    }
+
+
+    private RowMapper<UserRecord> rowMapper =
+        (rs, num) -> new UserRecord(rs.getLong("id"), rs.getString("name"));
+}
diff --git a/components/users/src/main/java/io/pivotal/pal/tracker/users/data/UserRecord.java b/components/users/src/main/java/io/pivotal/pal/tracker/users/data/UserRecord.java
new file mode 100644
index 0000000..9e769b1
--- /dev/null
+++ b/components/users/src/main/java/io/pivotal/pal/tracker/users/data/UserRecord.java
@@ -0,0 +1,39 @@
+package io.pivotal.pal.tracker.users.data;
+
+public class UserRecord {
+
+    public final long id;
+    public final String name;
+
+    public UserRecord(long id, String name) {
+        this.id = id;
+        this.name = name;
+    }
+
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        UserRecord that = (UserRecord) o;
+
+        if (id != that.id) return false;
+        return name != null ? name.equals(that.name) : that.name == null;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = (int) (id ^ (id >>> 32));
+        result = 31 * result + (name != null ? name.hashCode() : 0);
+        return result;
+    }
+
+    @Override
+    public String toString() {
+        return "UserRecord{" +
+            "id=" + id +
+            ", name='" + name + '\'' +
+            '}';
+    }
+}
diff --git a/components/users/src/test/java/test/pivotal/pal/tracker/users/UserControllerTest.java b/components/users/src/test/java/test/pivotal/pal/tracker/users/UserControllerTest.java
new file mode 100644
index 0000000..22bdca4
--- /dev/null
+++ b/components/users/src/test/java/test/pivotal/pal/tracker/users/UserControllerTest.java
@@ -0,0 +1,27 @@
+package test.pivotal.pal.tracker.users;
+
+import io.pivotal.pal.tracker.users.UserController;
+import io.pivotal.pal.tracker.users.UserInfo;
+import io.pivotal.pal.tracker.users.data.UserDataGateway;
+import io.pivotal.pal.tracker.users.data.UserRecord;
+import org.junit.Test;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.mockito.ArgumentMatchers.anyLong;
+import static org.mockito.Mockito.*;
+
+public class UserControllerTest {
+
+    private UserDataGateway gateway = mock(UserDataGateway.class);
+    private UserController controller = new UserController(gateway);
+
+    @Test
+    public void testShow() {
+        doReturn(new UserRecord(3L, "Some User")).when(gateway).find(anyLong());
+
+        UserInfo result = controller.show(3);
+
+        verify(gateway).find(3L);
+        assertThat(result).isEqualTo(new UserInfo(3L, "Some User", "user info"));
+    }
+}
diff --git a/components/users/src/test/java/test/pivotal/pal/tracker/users/data/UserDataGatewayTest.java b/components/users/src/test/java/test/pivotal/pal/tracker/users/data/UserDataGatewayTest.java
new file mode 100644
index 0000000..2f24120
--- /dev/null
+++ b/components/users/src/test/java/test/pivotal/pal/tracker/users/data/UserDataGatewayTest.java
@@ -0,0 +1,57 @@
+package test.pivotal.pal.tracker.users.data;
+
+
+import io.pivotal.pal.tracker.testsupport.TestScenarioSupport;
+import io.pivotal.pal.tracker.users.data.UserDataGateway;
+import io.pivotal.pal.tracker.users.data.UserRecord;
+import org.junit.Before;
+import org.junit.Test;
+import org.springframework.jdbc.core.JdbcTemplate;
+
+import java.util.Map;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+public class UserDataGatewayTest {
+
+    private TestScenarioSupport testScenarioSupport = new TestScenarioSupport("tracker_registration_test");
+    private JdbcTemplate template = testScenarioSupport.template;
+    private UserDataGateway gateway = new UserDataGateway(testScenarioSupport.dataSource);
+
+
+    @Before
+    public void setUp() throws Exception {
+        template.execute("DELETE FROM projects;");
+        template.execute("DELETE FROM accounts;");
+        template.execute("DELETE FROM users;");
+    }
+
+    @Test
+    public void testCreate() {
+        UserRecord createdUser = gateway.create("aUser");
+
+
+        assertThat(createdUser.id).isGreaterThan(0);
+        assertThat(createdUser.name).isEqualTo("aUser");
+
+        Map<String, Object> persistedFields = template.queryForMap("SELECT id, name FROM users WHERE id = ?", createdUser.id);
+        assertThat(persistedFields.get("id")).isEqualTo(createdUser.id);
+        assertThat(persistedFields.get("name")).isEqualTo(createdUser.name);
+    }
+
+    @Test
+    public void testFind() {
+        template.execute("INSERT INTO users(id, name) VALUES (42346, 'aName'), (42347, 'anotherName'), (42348, 'andAnotherName')");
+
+
+        UserRecord record = gateway.find(42347L);
+
+
+        assertThat(record).isEqualTo(new UserRecord(42347L, "anotherName"));
+    }
+
+    @Test
+    public void testFind_WhenNotFound() {
+        assertThat(gateway.find(42347L)).isNull();
+    }
+}
diff --git a/databases/allocations-database/build.gradle b/databases/allocations-database/build.gradle
new file mode 100644
index 0000000..b84b5bd
--- /dev/null
+++ b/databases/allocations-database/build.gradle
@@ -0,0 +1,5 @@
+databases {
+    devDatabase = "tracker_allocations_dev"
+    testDatabase = "tracker_allocations_test"
+    cfApp = "tracker-allocations"
+}
diff --git a/databases/allocations-database/migrations/V1__initial_schema.sql b/databases/allocations-database/migrations/V1__initial_schema.sql
new file mode 100644
index 0000000..b08ab3e
--- /dev/null
+++ b/databases/allocations-database/migrations/V1__initial_schema.sql
@@ -0,0 +1,11 @@
+create table allocations (
+  id bigint(20) not null auto_increment,
+  project_id bigint(20),
+  user_id bigint(20),
+  first_day datetime,
+  last_day datetime,
+
+  primary key (id)
+)
+engine = innodb
+default charset = utf8;
diff --git a/databases/backlog-database/build.gradle b/databases/backlog-database/build.gradle
new file mode 100644
index 0000000..bdc7319
--- /dev/null
+++ b/databases/backlog-database/build.gradle
@@ -0,0 +1,5 @@
+databases {
+    devDatabase = "tracker_backlog_dev"
+    testDatabase = "tracker_backlog_test"
+    cfApp = "tracker-backlog"
+}
diff --git a/databases/backlog-database/migrations/V1__initial_schema.sql b/databases/backlog-database/migrations/V1__initial_schema.sql
new file mode 100644
index 0000000..f83716d
--- /dev/null
+++ b/databases/backlog-database/migrations/V1__initial_schema.sql
@@ -0,0 +1,9 @@
+create table stories (
+  id         bigint(20) not null auto_increment,
+  project_id bigint(20),
+  name       VARCHAR(255),
+
+  primary key (id)
+)
+engine = innodb
+default charset = utf8;
diff --git a/databases/build.gradle b/databases/build.gradle
new file mode 100644
index 0000000..81469e0
--- /dev/null
+++ b/databases/build.gradle
@@ -0,0 +1,7 @@
+import io.pivotal.pal.tracker.gradlebuild.CfMigrationPlugin
+import io.pivotal.pal.tracker.gradlebuild.LocalMigrationPlugin
+
+subprojects {
+    apply plugin: LocalMigrationPlugin
+    apply plugin: CfMigrationPlugin
+}
diff --git a/databases/create_databases.sql b/databases/create_databases.sql
new file mode 100644
index 0000000..f9b793a
--- /dev/null
+++ b/databases/create_databases.sql
@@ -0,0 +1,21 @@
+DROP DATABASE IF EXISTS tracker_allocations_dev;
+DROP DATABASE IF EXISTS tracker_backlog_dev;
+DROP DATABASE IF EXISTS tracker_registration_dev;
+DROP DATABASE IF EXISTS tracker_timesheets_dev;
+DROP DATABASE IF EXISTS tracker_allocations_test;
+DROP DATABASE IF EXISTS tracker_backlog_test;
+DROP DATABASE IF EXISTS tracker_registration_test;
+DROP DATABASE IF EXISTS tracker_timesheets_test;
+
+CREATE USER IF NOT EXISTS 'tracker'@'localhost'
+  identified by '';
+GRANT ALL PRIVILEGES ON *.* TO 'tracker' @'localhost';
+
+CREATE DATABASE tracker_allocations_dev;
+CREATE DATABASE tracker_backlog_dev;
+CREATE DATABASE tracker_registration_dev;
+CREATE DATABASE tracker_timesheets_dev;
+CREATE DATABASE tracker_allocations_test;
+CREATE DATABASE tracker_backlog_test;
+CREATE DATABASE tracker_registration_test;
+CREATE DATABASE tracker_timesheets_test;
diff --git a/databases/registration-database/build.gradle b/databases/registration-database/build.gradle
new file mode 100644
index 0000000..68c8e7a
--- /dev/null
+++ b/databases/registration-database/build.gradle
@@ -0,0 +1,5 @@
+databases {
+    devDatabase = "tracker_registration_dev"
+    testDatabase = "tracker_registration_test"
+    cfApp = "tracker-registration"
+}
diff --git a/databases/registration-database/migrations/V1__initial_schema.sql b/databases/registration-database/migrations/V1__initial_schema.sql
new file mode 100644
index 0000000..03e3d00
--- /dev/null
+++ b/databases/registration-database/migrations/V1__initial_schema.sql
@@ -0,0 +1,34 @@
+create table users (
+  id   bigint(20) not null auto_increment,
+  name VARCHAR(255),
+
+  primary key (id),
+  unique key name (name)
+)
+engine = innodb
+default charset = utf8;
+
+create table accounts (
+  id       bigint(20) not null auto_increment,
+  owner_id bigint(20),
+  name     VARCHAR(255),
+
+  primary key (id),
+  unique key name (name),
+  constraint foreign key (owner_id) references users (id)
+)
+engine = innodb
+default charset = utf8;
+
+create table projects (
+  id         bigint(20) not null auto_increment,
+  account_id bigint(20),
+  name       VARCHAR(255),
+  active     bit(1) not null default b'1',
+
+  primary key (id),
+  unique key name (name),
+  constraint foreign key (account_id) references accounts (id)
+)
+engine = innodb
+default charset = utf8;
diff --git a/databases/timesheets-database/build.gradle b/databases/timesheets-database/build.gradle
new file mode 100644
index 0000000..c51bfe0
--- /dev/null
+++ b/databases/timesheets-database/build.gradle
@@ -0,0 +1,5 @@
+databases {
+    devDatabase = "tracker_timesheets_dev"
+    testDatabase = "tracker_timesheets_test"
+    cfApp = "tracker-timesheets"
+}
diff --git a/databases/timesheets-database/migrations/V1__initial_schema.sql b/databases/timesheets-database/migrations/V1__initial_schema.sql
new file mode 100644
index 0000000..f57f955
--- /dev/null
+++ b/databases/timesheets-database/migrations/V1__initial_schema.sql
@@ -0,0 +1,11 @@
+create table time_entries (
+  id bigint(20) not null auto_increment,
+  project_id bigint(20),
+  user_id bigint(20),
+  date datetime,
+  hours int,
+
+  primary key (id)
+)
+engine = innodb
+default charset = utf8;
diff --git a/gradle.properties b/gradle.properties
new file mode 100644
index 0000000..df04678
--- /dev/null
+++ b/gradle.properties
@@ -0,0 +1 @@
+org.gradle.workers.max=8
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 0000000000000000000000000000000000000000..654ea5351d421cd99716762be216fff94c524d16
GIT binary patch
literal 54706
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

literal 0
HcmV?d00001

diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 0000000..fa05b97
--- /dev/null
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Thu Jul 06 09:23:55 MDT 2017
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.0-all.zip
diff --git a/gradlew b/gradlew
new file mode 100755
index 0000000..cccdd3d
--- /dev/null
+++ b/gradlew
@@ -0,0 +1,172 @@
+#!/usr/bin/env sh
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn () {
+    echo "$*"
+}
+
+die () {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+nonstop=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
+esac
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Escape application args
+save () {
+    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
+    echo " "
+}
+APP_ARGS=$(save "$@")
+
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+
+# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
+if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
+  cd "$(dirname "$0")"
+fi
+
+exec "$JAVACMD" "$@"
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100644
index 0000000..e95643d
--- /dev/null
+++ b/gradlew.bat
@@ -0,0 +1,84 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windows variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/integration-test/build.gradle b/integration-test/build.gradle
new file mode 100644
index 0000000..51ecf03
--- /dev/null
+++ b/integration-test/build.gradle
@@ -0,0 +1,10 @@
+dependencies {
+    testCompile project(":components:test-support")
+    testCompile "com.squareup.okhttp3:okhttp:3.8.0"
+    testCompile "com.jayway.jsonpath:json-path:2.2.0"
+}
+
+test.dependsOn ":applications:allocations-server:assemble"
+test.dependsOn ":applications:backlog-server:assemble"
+test.dependsOn ":applications:registration-server:assemble"
+test.dependsOn ":applications:timesheets-server:assemble"
diff --git a/integration-test/src/test/java/test/pivotal/pal/tracker/FlowTest.java b/integration-test/src/test/java/test/pivotal/pal/tracker/FlowTest.java
new file mode 100644
index 0000000..c84d25a
--- /dev/null
+++ b/integration-test/src/test/java/test/pivotal/pal/tracker/FlowTest.java
@@ -0,0 +1,158 @@
+package test.pivotal.pal.tracker;
+
+
+import com.jayway.jsonpath.JsonPath;
+import com.jayway.jsonpath.PathNotFoundException;
+import io.pivotal.pal.tracker.testsupport.TestScenarioSupport;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import test.pivotal.pal.tracker.support.ApplicationServer;
+import test.pivotal.pal.tracker.support.HttpClient;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Fail.fail;
+import static test.pivotal.pal.tracker.support.MapBuilder.jsonMapBuilder;
+
+public class FlowTest {
+
+    private final HttpClient httpClient = new HttpClient();
+    private final String workingDir = System.getProperty("user.dir");
+
+    private ApplicationServer registrationServer = new ApplicationServer(workingDir + "/../applications/registration-server/build/libs/registration-server.jar", "8883");
+    private ApplicationServer allocationsServer = new ApplicationServer(workingDir + "/../applications/allocations-server/build/libs/allocations-server.jar", "8881");
+    private ApplicationServer backlogServer = new ApplicationServer(workingDir + "/../applications/backlog-server/build/libs/backlog-server.jar", "8882");
+    private ApplicationServer timesheetsServer = new ApplicationServer(workingDir + "/../applications/timesheets-server/build/libs/timesheets-server.jar", "8884");
+
+    private String registrationServerUrl(String path) {
+        return "http://localhost:8883" + path;
+    }
+
+    private String allocationsServerUrl(String path) {
+        return "http://localhost:8881" + path;
+    }
+
+    private String backlogServerUrl(String path) {
+        return "http://localhost:8882" + path;
+    }
+
+    private String timesheetsServerUrl(String path) {
+        return "http://localhost:8884" + path;
+    }
+
+    private long findResponseId(HttpClient.Response response) {
+        try {
+            return JsonPath.parse(response.body).read("$.id", Long.class);
+        } catch (PathNotFoundException e) {
+            try {
+                return JsonPath.parse(response.body).read("$[0].id", Long.class);
+            } catch (PathNotFoundException e1) {
+                fail("Could not find id in response body. Response was: \n" + response);
+                return -1;
+            }
+        }
+    }
+
+
+    @Before
+    public void setup() throws Exception {
+        registrationServer.startWithDatabaseName("tracker_registration_test");
+        allocationsServer.startWithDatabaseName("tracker_allocations_test");
+        backlogServer.startWithDatabaseName("tracker_backlog_test");
+        timesheetsServer.startWithDatabaseName("tracker_timesheets_test");
+        ApplicationServer.waitOnPorts("8881", "8882", "8883", "8884");
+        TestScenarioSupport.clearAllDatabases();
+    }
+
+    @After
+    public void tearDown() {
+        registrationServer.stop();
+        allocationsServer.stop();
+        backlogServer.stop();
+        timesheetsServer.stop();
+    }
+
+    @Test
+    public void testBasicFlow() throws Exception {
+        HttpClient.Response response;
+
+        response = httpClient.get(registrationServerUrl("/"));
+        assertThat(response.body).isEqualTo("Noop!");
+
+        response = httpClient.post(registrationServerUrl("/registration"), jsonMapBuilder()
+            .put("name", "aUser")
+            .build()
+        );
+        long createdUserId = findResponseId(response);
+        assertThat(createdUserId).isGreaterThan(0);
+
+        response = httpClient.get(registrationServerUrl("/users/" + createdUserId));
+        assertThat(response.body).isNotNull().isNotEmpty();
+
+        response = httpClient.get(registrationServerUrl("/accounts?ownerId=" + createdUserId));
+        long createdAccountId = findResponseId(response);
+        assertThat(createdAccountId).isGreaterThan(0);
+
+        response = httpClient.post(registrationServerUrl("/projects"), jsonMapBuilder()
+            .put("accountId", createdAccountId)
+            .put("name", "aProject")
+            .build()
+        );
+        long createdProjectId = findResponseId(response);
+        assertThat(createdProjectId).isGreaterThan(0);
+
+        response = httpClient.get(registrationServerUrl("/projects?accountId=" + createdAccountId));
+        assertThat(response.body).isNotNull().isNotEmpty();
+
+
+        response = httpClient.get(allocationsServerUrl("/"));
+        assertThat(response.body).isEqualTo("Noop!");
+
+        response = httpClient.post(
+            allocationsServerUrl("/allocations"), jsonMapBuilder()
+                .put("projectId", createdProjectId)
+                .put("userId", createdUserId)
+                .put("firstDay", "2015-05-17")
+                .put("lastDay", "2015-05-26")
+                .build()
+        );
+
+        long createdAllocationId = findResponseId(response);
+        assertThat(createdAllocationId).isGreaterThan(0);
+
+        response = httpClient.get(allocationsServerUrl("/allocations?projectId=" + createdProjectId));
+        assertThat(response.body).isNotNull().isNotEmpty();
+
+
+        response = httpClient.get(backlogServerUrl("/"));
+        assertThat(response.body).isEqualTo("Noop!");
+
+        response = httpClient.post(backlogServerUrl("/stories"), jsonMapBuilder()
+            .put("projectId", createdProjectId)
+            .put("name", "A story")
+            .build()
+        );
+        long createdStoryId = findResponseId(response);
+        assertThat(createdStoryId).isGreaterThan(0);
+
+        response = httpClient.get(backlogServerUrl("/stories?projectId" + createdProjectId));
+        assertThat(response.body).isNotNull().isNotEmpty();
+
+
+        response = httpClient.get(timesheetsServerUrl("/"));
+        assertThat(response.body).isEqualTo("Noop!");
+
+        response = httpClient.post(timesheetsServerUrl("/time-entries"), jsonMapBuilder()
+            .put("projectId", createdProjectId)
+            .put("userId", createdUserId)
+            .put("date", "2015-12-17")
+            .put("hours", 8)
+            .build()
+        );
+        long createdTimeEntryId = findResponseId(response);
+        assertThat(createdTimeEntryId).isGreaterThan(0);
+
+        response = httpClient.get(timesheetsServerUrl("/time-entries?projectId" + createdProjectId));
+        assertThat(response.body).isNotNull().isNotEmpty();
+    }
+}
diff --git a/integration-test/src/test/java/test/pivotal/pal/tracker/support/ApplicationServer.java b/integration-test/src/test/java/test/pivotal/pal/tracker/support/ApplicationServer.java
new file mode 100644
index 0000000..023b1b8
--- /dev/null
+++ b/integration-test/src/test/java/test/pivotal/pal/tracker/support/ApplicationServer.java
@@ -0,0 +1,80 @@
+package test.pivotal.pal.tracker.support;
+
+import java.io.IOException;
+import java.time.Instant;
+import java.time.temporal.ChronoUnit;
+import java.util.Map;
+
+import static org.assertj.core.api.Assertions.fail;
+import static test.pivotal.pal.tracker.support.MapBuilder.envMapBuilder;
+
+public class ApplicationServer {
+
+    private final String jarPath;
+    private final String port;
+
+    private Process serverProcess;
+
+    public ApplicationServer(String jarPath, String port) {
+        this.jarPath = jarPath;
+        this.port = port;
+    }
+
+
+    public void start(Map<String, String> env) throws IOException, InterruptedException {
+        ProcessBuilder processBuilder = new ProcessBuilder()
+            .command("java", "-jar", jarPath)
+            .inheritIO();
+
+        processBuilder.environment().put("SERVER_PORT", port);
+        env.forEach((key, value) -> processBuilder.environment().put(key, value));
+
+        serverProcess = processBuilder.start();
+    }
+
+    public void startWithDatabaseName(String dbName) throws IOException, InterruptedException {
+        String dbUrl = "jdbc:mysql://localhost:3306/" + dbName + "?useSSL=false&useTimezone=true&serverTimezone=UTC&useLegacyDatetimeCode=false";
+
+        start(envMapBuilder()
+            .put("SPRING_DATASOURCE_URL", dbUrl)
+            .put("REGISTRATION_SERVER_ENDPOINT", "http://localhost:8883")
+            .build()
+        );
+    }
+
+    public void stop() {
+        serverProcess.destroyForcibly();
+    }
+
+
+    public static void waitOnPorts(String... ports) throws InterruptedException {
+        for (String port : ports) waitUntilServerIsUp(port);
+    }
+
+    private static void waitUntilServerIsUp(String port) throws InterruptedException {
+        HttpClient httpClient = new HttpClient();
+        int timeout = 120;
+        Instant start = Instant.now();
+        boolean isUp = false;
+
+        System.out.print("Waiting on port " + port + "...");
+
+        while (!isUp) {
+            try {
+                httpClient.get("http://localhost:" + port);
+                isUp = true;
+                System.out.println(" server is up.");
+            } catch (Throwable e) {
+
+                long timeSpent = ChronoUnit.SECONDS.between(start, Instant.now());
+                if (timeSpent > timeout) {
+                    fail("Timed out waiting for server on port " + port);
+                }
+
+                System.out.print(".");
+                Thread.sleep(200);
+            }
+        }
+    }
+}
+
diff --git a/integration-test/src/test/java/test/pivotal/pal/tracker/support/HttpClient.java b/integration-test/src/test/java/test/pivotal/pal/tracker/support/HttpClient.java
new file mode 100644
index 0000000..d527847
--- /dev/null
+++ b/integration-test/src/test/java/test/pivotal/pal/tracker/support/HttpClient.java
@@ -0,0 +1,85 @@
+package test.pivotal.pal.tracker.support;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import okhttp3.*;
+
+import java.io.IOException;
+import java.util.Map;
+
+public class HttpClient {
+
+    private static final MediaType JSON = MediaType.parse("application/json");
+
+    private final OkHttpClient okHttp = new OkHttpClient();
+    private final ObjectMapper objectMapper = new ObjectMapper();
+
+
+    public Response get(String url) {
+        return fetch(new Request.Builder().url(url));
+    }
+
+    public Response post(String url, Map<String, Object> jsonBody) {
+        try {
+            Request.Builder reqBuilder = new Request.Builder()
+                .url(url)
+                .post(RequestBody.create(JSON, objectMapper.writeValueAsString(jsonBody)));
+
+            return fetch(reqBuilder);
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    public Response put(String url, Map<String, Object> jsonBody) {
+        try {
+            Request.Builder reqBuilder = new Request.Builder()
+                .url(url)
+                .put(RequestBody.create(JSON, objectMapper.writeValueAsString(jsonBody)));
+
+            return fetch(reqBuilder);
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    public Response delete(String url) {
+        return fetch(new Request.Builder().delete().url(url));
+    }
+
+
+    private Response fetch(Request.Builder requestBuilder) {
+        try {
+            Request request = requestBuilder.build();
+
+            okhttp3.Response response = okHttp.newCall(request).execute();
+            ResponseBody body = response.body();
+
+            if (body == null) {
+                return new Response(response.code(), "");
+            }
+
+            return new Response(response.code(), body.string());
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    public static class Response {
+        public final int status;
+        public final String body;
+
+        public Response(int status, String body) {
+            this.status = status;
+            this.body = body;
+        }
+
+        @Override
+        public String toString() {
+            return "Response{" +
+                "status=" + status +
+                ", body='" + body + '\'' +
+                '}';
+        }
+    }
+}
+
diff --git a/integration-test/src/test/java/test/pivotal/pal/tracker/support/MapBuilder.java b/integration-test/src/test/java/test/pivotal/pal/tracker/support/MapBuilder.java
new file mode 100644
index 0000000..a47466f
--- /dev/null
+++ b/integration-test/src/test/java/test/pivotal/pal/tracker/support/MapBuilder.java
@@ -0,0 +1,26 @@
+package test.pivotal.pal.tracker.support;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class MapBuilder<K, V> {
+
+    private Map<K, V> map = new HashMap<>();
+
+    public static MapBuilder<String, String> envMapBuilder() {
+        return new MapBuilder<>();
+    }
+
+    public static MapBuilder<String, Object> jsonMapBuilder() {
+        return new MapBuilder<>();
+    }
+
+    public MapBuilder<K, V> put(K key, V value) {
+        map.put(key, value);
+        return this;
+    }
+
+    public Map<K, V> build() {
+        return map;
+    }
+}
diff --git a/manifest-allocations.yml b/manifest-allocations.yml
new file mode 100644
index 0000000..117900f
--- /dev/null
+++ b/manifest-allocations.yml
@@ -0,0 +1,11 @@
+applications:
+- name: tracker-allocations
+  path: ./applications/allocations-server/build/libs/allocations-server.jar
+  routes:
+  - route: allocations-pal-INITIALS.apps.chicken.pal.pivotal.io
+  memory: 1G
+  instances: 1
+  env:
+    REGISTRATION_SERVER_ENDPOINT: http://FILL_ME_IN
+  services:
+  - tracker-allocations-database
diff --git a/manifest-backlog.yml b/manifest-backlog.yml
new file mode 100644
index 0000000..03e9bfe
--- /dev/null
+++ b/manifest-backlog.yml
@@ -0,0 +1,11 @@
+applications:
+- name: tracker-backlog
+  path: ./applications/backlog-server/build/libs/backlog-server.jar
+  routes:
+  - route: backlog-pal-INITIALS.apps.chicken.pal.pivotal.io
+  memory: 1G
+  instances: 1
+  env:
+    REGISTRATION_SERVER_ENDPOINT: http://FILL_ME_IN
+  services:
+  - tracker-backlog-database
diff --git a/manifest-registration.yml b/manifest-registration.yml
new file mode 100644
index 0000000..60714a1
--- /dev/null
+++ b/manifest-registration.yml
@@ -0,0 +1,9 @@
+applications:
+- name: tracker-registration
+  path: ./applications/registration-server/build/libs/registration-server.jar
+  routes:
+  - route: registration-pal-INITIALS.apps.chicken.pal.pivotal.io
+  memory: 1G
+  instances: 1
+  services:
+  - tracker-registration-database
diff --git a/manifest-timesheets.yml b/manifest-timesheets.yml
new file mode 100644
index 0000000..ce59ad5
--- /dev/null
+++ b/manifest-timesheets.yml
@@ -0,0 +1,11 @@
+applications:
+- name: tracker-timesheets
+  path: ./applications/timesheets-server/build/libs/timesheets-server.jar
+  routes:
+  - route: timesheets-pal-INITIALS.apps.chicken.pal.pivotal.io
+  memory: 1G
+  instances: 1
+  env:
+    REGISTRATION_SERVER_ENDPOINT: http://FILL_ME_IN
+  services:
+  - tracker-timesheets-database
diff --git a/requests.http b/requests.http
new file mode 100644
index 0000000..1d1532a
--- /dev/null
+++ b/requests.http
@@ -0,0 +1,49 @@
+### Create user
+POST {{registrationUrl}}/registration
+Content-Type: application/json
+
+{"name": "Sally"}
+
+### Get user
+GET {{registrationUrl}}/users/USER-ID
+
+### Get account
+GET {{registrationUrl}}/accounts?ownerId=USER-ID
+
+### Create project
+POST {{registrationUrl}}/projects
+Content-Type: application/json
+
+{"name": "Basket Weaving III", "accountId": ACCOUNT-ID}
+
+### Get projects
+GET {{registrationUrl}}/projects?accountId=ACCOUNT-ID
+
+### Create allocation
+POST {{allocationsUrl}}/allocations
+Content-Type: application/json
+
+{"projectId": PROJECT-ID, "userId": USER-ID, "firstDay": "2015-05-17", "lastDay": "2015-05-18"}
+
+### Get allocations
+GET {{allocationsUrl}}/allocations?projectId=PROJECT-ID
+
+### Create story
+POST {{backlogUrl}}/stories
+Content-Type: application/json
+
+{"projectId": PROJECT-ID, "name": "Find some reeds"}
+
+### Get stories
+GET {{backlogUrl}}/stories?projectId=PROJECT-ID
+
+### Create timesheet
+POST {{timesheetsUrl}}/time-entries/
+Content-Type: application/json
+
+{"projectId": PROJECT-ID, "userId": USER-ID, "date": "2015-05-17", "hours": 6}
+
+### Get timesheets
+GET {{timesheetsUrl}}/time-entries?userId=USER-ID
+
+###
diff --git a/rest-client.env.json b/rest-client.env.json
new file mode 100644
index 0000000..7be7fd9
--- /dev/null
+++ b/rest-client.env.json
@@ -0,0 +1,14 @@
+{
+  "production": {
+    "registrationUrl": "http://registration-pal-INITIALS.apps.FILLMEIN.pal.pivotal.io",
+    "allocationsUrl": "http://allocations-pal-INITIALS.apps.FILLMEIN.pal.pivotal.io",
+    "backlogUrl": "http://backlog-pal-INITIALS.apps.FILLMEIN.pal.pivotal.io",
+    "timesheetsUrl": "http://timesheets-pal-INITIALS.apps.FILLMEIN.pal.pivotal.io"
+  },
+  "development": {
+    "registrationUrl": "http://localhost:8083",
+    "allocationsUrl": "http://localhost:8081",
+    "backlogUrl": "http://localhost:8082",
+    "timesheetsUrl": "http://localhost:8084"
+  }
+}
diff --git a/settings.gradle b/settings.gradle
new file mode 100644
index 0000000..307ee44
--- /dev/null
+++ b/settings.gradle
@@ -0,0 +1,23 @@
+rootProject.name = "pal-tracker-distributed"
+
+include "applications:allocations-server"
+include "applications:backlog-server"
+include "applications:registration-server"
+include "applications:timesheets-server"
+
+include "components:accounts"
+include "components:allocations"
+include "components:backlog"
+include "components:projects"
+include "components:timesheets"
+include "components:users"
+
+include "components:rest-support"
+include "components:test-support"
+
+include "databases:allocations-database"
+include "databases:backlog-database"
+include "databases:registration-database"
+include "databases:timesheets-database"
+
+include "integration-test"
-- 
2.12.3

